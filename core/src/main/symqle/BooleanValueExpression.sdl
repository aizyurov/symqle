#############################################################################
#
#   Copyright 2010-2013 Alexander Izyurov
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.package org.symqle.common;
#
##############################################################################

public interface BooleanExpression : SqlBuilder {}

public class AbstractBooleanExpression implements BooleanExpression {}

# For BooleanValueExpression syntax is very close to sql-2003

BooleanExpression ::=
    bt:BooleanTerm :: implicit
|
    /**
     * Creates a boolean expression representing {@code this OR other}.
     * @param other the second argument
     * @return logical disjunction of {@code this} and {@code} other
     */
    bve:BooleanExpression OR other:BooleanTerm :: AbstractBooleanExpression or
;

public interface BooleanTerm : SqlBuilder {}

public class AbstractBooleanTerm implements BooleanTerm {}

BooleanTerm ::=
    bf:BooleanFactor :: implicit
|
    /**
     * Creates a boolean term representing {@code this AND other}.
     * @param other the second argument
     * @return logical conjunction of {@code this} and {@code} other
     */
    bt:BooleanTerm AND other:BooleanFactor :: AbstractBooleanTerm and
;

public interface BooleanFactor : SqlBuilder {}

public class AbstractBooleanFactor implements BooleanFactor {}

BooleanFactor ::=
    bt:BooleanTest :: implicit {}
|
    /**
     * Logical negation of  {@code this}.
     * @return logical negation of {@code this}
     */
    NOT bt:BooleanTest :: AbstractBooleanFactor negate
;

public interface BooleanTest : SqlBuilder {}

public class AbstractBooleanTest implements BooleanTest {}

BooleanTest ::=
    bp:BooleanPrimary :: implicit
|
    /**
     * {@code this IS NOT TRUE}.
     * @return the result of IS NOT TRUE operation
     */
    bp:BooleanPrimary  IS  NOT  TRUE :: AbstractBooleanTest isNotTrue
|
    /**
     * {@code this IS TRUE}.
     * @return the result of IS TRUE operation
     */
    bp:BooleanPrimary  IS  TRUE :: AbstractBooleanTest isTrue
|
    /**
     * {@code this IS NOT FALSE}.
     * @return the result of IS NOT FALSE operation
     */
    bp:BooleanPrimary  IS  NOT  FALSE :: AbstractBooleanTest isNotFalse {}
|
    /**
     * {@code this IS FALSE}.
     * @return the result of IS FALSE operation
     */
    bp:BooleanPrimary  IS  FALSE :: AbstractBooleanTest isFalse
|
    /**
     * {@code this IS NOT UNKNOWN}.
     * @return the result of IS NOT UNKNOWN operation
     */
    bp:BooleanPrimary  IS  NOT  UNKNOWN :: AbstractBooleanTest isNotUnknown
|
    /**
     * {@code this IS UNKNOWN}.
     * @return the result of IS UNKNOWN operation
     */
    bp:BooleanPrimary  IS  UNKNOWN :: AbstractBooleanTest isUnknown
;

interface BooleanPrimary : SqlBuilder {}

public class AbstractBooleanPrimary implements BooleanPrimary {}

BooleanPrimary ::=
    p:Predicate :: implicit {}
|
    LEFT_PAREN bve:BooleanExpression RIGHT_PAREN :: implicit
|
    /**
     * Converts {@code this} to boolean primary.
     * {@code this} should have database type convertable to BOOLEAN,
     * consult your database documentation for available implicit conversions.
     * @return {@code this} as logical expression, which can be used in conditions and in
     * logical operations.
     */
    value:ValueExpressionPrimary<?> :: AbstractBooleanPrimary asBoolean
;



