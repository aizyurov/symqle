#############################################################################
#
#   Copyright 2010-2013 Alexander Izyurov
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.package org.symqle.common;
#
##############################################################################

import org.symqle.common.CompositeSqlBuilder;
import org.symqle.common.MalformedStatementException;
import org.symqle.common.SqlBuilder;
import org.symqle.common.SqlContext;
import org.symqle.querybuilder.Configuration;
import org.symqle.common.StringSqlBuilder;
import org.symqle.querybuilder.SqlTerm;
import org.symqle.querybuilder.TableNameGenerator;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
class FromClauseBuilder {
    /**
     * Builds a SqlBuilder of FromClause from local scope tables.
     * @param context
     * @return null if FROM CLAUSE is not applicable (no tables and supported by dialect and options)
     */
    SqlBuilder build(final SqlContext context) {
        SelectTableRegistry registry = (SelectTableRegistry) context.get(TableRegistry.class);
        final Configuration configuration = context.get(Configuration.class);
        final boolean allowNoFrom = configuration.allowNoFrom();
        final boolean allowImplicitCrossJoins = configuration.allowImplicitCrossJoins();
        final List<TableOrView> localTables = registry.getLocal();
        if (localTables.isEmpty()) {
            if (allowNoFrom) {
                return generateEmptyFromClause(context);
            } else {
                throw new MalformedStatementException("At least one table is required for FROM clause");
            }
        }
        final Set<TableOrView> roots = new HashSet<TableOrView>();
        for (TableOrView t : localTables) {
            roots.add(t.joinedTableRoot());
        }
        final List<TableOrView> orderedRoots = new ArrayList<TableOrView>(roots);
        Collections.sort(orderedRoots, new Comparator<TableOrView>() {
            @Override
            public int compare(final TableOrView o1, final TableOrView o2) {
                return o1.getCorrelationName(context).compareTo(o2.getCorrelationName(context));
            }
        });
        final Iterator<TableOrView> iterator = orderedRoots.iterator();
        TableReferenceList tableReferenceList = Symqle.createTableReferenceList(iterator.next());
        while (iterator.hasNext()) {
            if (!allowImplicitCrossJoins) {
                throw new MalformedStatementException("Implicit cross joins are not allowed, cross joined: " + roots);
            }
            tableReferenceList = Symqle.appendTableReferenceList(tableReferenceList, iterator.next());
        }
        return Symqle.createFrom(tableReferenceList).z$sqlOfFromClause(context);
    }


    private SqlBuilder generateEmptyFromClause(final SqlContext context) {
        final Dialect dialect = context.get(Dialect.class);
        final String fallbackTableName = dialect.fallbackTableName();
        if (fallbackTableName == null) {
            return null;
        } else {
            // need a unique correlation name for fallback table
            return new CompositeSqlBuilder(
              SqlTerm.FROM,
              new StringSqlBuilder(fallbackTableName),
              SqlTerm.AS,
              new StringSqlBuilder(context.get(TableNameGenerator.class).generate("DUMMY")));
        }
    }
}

