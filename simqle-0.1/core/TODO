(done another way: method map() for expressions) public ValueExpression<T> add(ValueExpression<?>, Term<?>, Mapper<T>);
mult, div, sum
Same for concat

(done) Rename plus -> add, minus -> sub

(discarded) Add access to DialectDataSource from Row (needed for collections) - no need, can pass DDS to Selector constructor

(done) Refactor DialectDataSource -> DatabaseGate - transaction suport! is DataSource enough?
Remove list(DataSource,...) ?

(done) Remove setIgnoreType: methods with Mapper will do

(d0ne) casts

(done) contains() for subquery

(done) refactor Pair - rename all methods and variables

LIMIT/OFFSET

(done) add ORDER BY for union/except/intersect (without parameter, there is only one column accessible via Context)

(done) fix orderAsc/orderDesc: remove literal "S0"

(done) map() for WhenClause*; rename methods (orWhen -> option ; orElse => otherwise)

public SetList.append() to reuse the same code for insert and update

(done) collate clause

Symqle methods visibility. Package scope and public methods of Simqle become public in abstract classes. Protected methods make no sense - to be removed. 

