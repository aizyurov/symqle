public interface AggregateFunction<T> extends Scalar<T> : Sql {}

public class AbstractAggregateFunction<T> implements AggregateFunction<T> {}

# only <general set function>'s are supported so far.
# DISTINCT is supported where appropriate
# COUNT(*) not supported so far

AggregateFunction<Integer> ::=
    COUNT LEFT_PAREN ve:ValueExpression<?> RIGHT_PAREN :: public AbstractAggregateFunction<Integer> count {
        public Mapper<Integer> getMapper() {
            return Mappers.INTEGER;
        }
    }
|
    COUNT LEFT_PAREN DISTINCT ve:ValueExpression<?> RIGHT_PAREN :: public AbstractAggregateFunction<Integer> countDistinct {
        public Mapper<Integer> getMapper() {
            return Mappers.INTEGER;
        }
    }
;

<T> AggregateFunction<T> ::=
    SUM LEFT_PAREN ve:ValueExpression<T> RIGHT_PAREN :: public AbstractAggregateFunction<T> sum {}
|
    MIN LEFT_PAREN ve:ValueExpression<T> RIGHT_PAREN :: public AbstractAggregateFunction<T> min {}
|
    MAX LEFT_PAREN ve:ValueExpression<T> RIGHT_PAREN :: public AbstractAggregateFunction<T> max {}
;

AggregateFunction<Number> ::=
    AVG LEFT_PAREN ve:ValueExpression<?> RIGHT_PAREN :: public AbstractAggregateFunction<Number> avg {
        public Mapper<Number> getMapper() {
            return Mappers.NUMBER;
        }
    }
;




