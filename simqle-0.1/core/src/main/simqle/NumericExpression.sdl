public interface NumericExpression<T> extends Scalar<T>: Sql {}

public class AbstractNumericExpression<T> implements NumericExpression<T> {}

# implicit operations retain type argument
<T> NumericExpression<T> ::=
    t:Term<T> :: implicit {}
;

# all operations accept <? extends Number> and return <Number>
NumericExpression<Number> ::=
    e:NumericExpression<?> PLUS t:Term<?>
         :: public AbstractNumericExpression<Number> add {
            public Mapper<Number> getMapper() {
                    return Mappers.NUMBER;
            }
         }
|
    e:NumericExpression<?> MINUS t:Term<?>
         :: public AbstractNumericExpression<Number> sub {
            public Mapper<Number> getMapper() {
                    return Mappers.NUMBER;
            }
         }
;

:: private <T> AbstractNumericExpression<T> remap(final AbstractNumericExpression<?> e, final Mapper<T> mapper) {
    return new AbstractNumericExpression<T>() {
        @Override
        public Mapper<T> getMapper() {
            return mapper;
        }

        @Override
        public Sql z$create$NumericExpression(final SqlContext context) {
            return e.z$create$NumericExpression(context);
        }
    };
}

:: public AbstractNumericExpression<Number> add(final NumericExpression<?> e, final Number n) {
    return add(e, DynamicParameter.create(Mappers.NUMBER, n));
}

:: public <T> AbstractNumericExpression<T> add(final NumericExpression<?> e, final Term<?> t, final Mapper<T> mapper) {
    return remap(add(e, t), mapper);
}

:: public <T> AbstractNumericExpression<T> add(final NumericExpression<?> e, final Number n, final Mapper<T> mapper) {
    return remap(add(e, n), mapper);
}

:: public AbstractNumericExpression<Number> sub(final NumericExpression<?> e, final Number n) {
    return sub(e,  DynamicParameter.create(Mappers.NUMBER, n));
}


public interface Term<T> extends Scalar<T> : Sql {}

public class AbstractTerm<T> implements Term<T> {}

<T> Term<T> ::= f:Factor<T> :: implicit {}
;

Term<Number> ::=
    t:Term<?> ASTERISK f:Factor<?>
        :: public AbstractTerm<Number> mult {
            public Mapper<Number> getMapper() {
                    return Mappers.NUMBER;
            }
        }
|
    t:Term<?> SOLIDUS f:Factor<?>
        :: public AbstractTerm<Number> div {
            public Mapper<Number> getMapper() {
                    return Mappers.NUMBER;
            }
        }
;

:: public AbstractTerm<Number> mult(final Term<?> t, final Number n) {
    return mult(t, DynamicParameter.create(Mappers.NUMBER, n));
 }

:: public AbstractTerm<Number> div(final Term<?> t, final Number n) {
    return div(t, DynamicParameter.create(Mappers.NUMBER, n));
 }


public interface Factor<T> extends Scalar<T> : Sql {}

public class AbstractFactor<T> implements Factor<T> {}

# negate retains type argument
<T> Factor<T> ::=
    e:ValueExpressionPrimary<T> :: implicit {}
;
<T> Factor<T> ::= 
    MINUS e:ValueExpressionPrimary<T> :: public AbstractFactor<T> opposite {}
;

