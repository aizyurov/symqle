# # corresponds to direct_select-statement in Sql-2003.2
public interface SelectStatement<T> : Query<T>
{}

public class AbstractSelectStatement<T> implements SelectStatement<T>
{}

# key Simqle methods to query values

import org.simqle.Callback;
import javax.sql.DataSource;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import org.simqle.Callback;
import org.simqle.Row;
import org.simqle.jdbc.ResultSetRow;
import org.simqle.jdbc.StatementParameters;
import org.simqle.jdbc.StatementOption;
:: public <T> int scroll(final SelectStatement<T> statement,
                          final DataSource datasource,
                          final Callback<T> callback,
                          final StatementOption... options
                          ) throws SQLException {
     final Query<T> query = prepareQuery(statement);
     final Connection connection = datasource.getConnection();
     try {
         final PreparedStatement preparedStatement = connection.prepareStatement(beautifySql(query.getSqlText()));
         for (final StatementOption option : options) {
            option.apply(preparedStatement);
         }
         try {
             query.setParameters(new StatementParameters(preparedStatement));
             final ResultSet resultSet = preparedStatement.executeQuery();
             final Row row = new ResultSetRow(resultSet);
             try {
                int count = 0;
                 while (resultSet.next()) {
                     count++;
                     if (!callback.iterate(query.extract(row))) {
                        break;
                     }
                 }
                 return count;
             } finally {
                 resultSet.close();
             }
         } finally {
             preparedStatement.close();
         }
     } finally {
         connection.close();
     }
}

import javax.sql.DataSource;
import java.sql.SQLException;
import java.util.List;
::
public <T> List<T> list(final SelectStatement<T> statement,
                          final DataSource datasource,
                          final StatementOption... options
                        ) throws SQLException {
        final List<T> result = new LinkedList<T>();
        scroll(statement,  datasource,
            new Callback<T>() {
                public boolean iterate(T arg) {
                    result.add(arg);
                    return true;
                }
             }, options);
        return result;
    }

:: public String show(final SelectStatement<?> statement) {
     String sql = prepareQuery(statement).getSqlText();
     return beautifySql(sql);
    }

:: private <T> Query<T> prepareQuery(final SelectStatement<T> statement) {
        final SelectTableRegistry tableRegistry = new SelectTableRegistry(new TableNameProvider());
        // training: learn all tables participating in query
        {
            final SqlContext context = new SqlContext();
            context.set(UniqueNameProvider.class, new ColumnNameProvider());
            context.set(TableRegistry.class, tableRegistry);
            context.set(Dialect.class, GenericDialect.get());
            tableRegistry.setTestMode(true);
            statement.z$create$SelectStatement(context);
        }
        // real generation of Sql
        final Query<T> query;
        {
            final SqlContext context = new SqlContext();
            context.set(UniqueNameProvider.class, new ColumnNameProvider());
            context.set(TableRegistry.class, tableRegistry);
            context.set(Dialect.class, GenericDialect.get());
            tableRegistry.setTestMode(false);
            query = statement.z$create$SelectStatement(context);
        }
        return query;
    }


:: private String beautifySql(final String source) {
        return source
                .replaceAll("([(.])\\s+", "$1")
                .replaceAll("\\s+([().,])", "$1")
                .trim();
    }




# # direct_zSelectStatement:_multiple_rows ::= zCursorSpecification
# # zCursorSpecification ::= zQueryExpression [ zOrderByClause ] [ updatability_clause ]
# # updatability_clause ::= FOR { READ ONLY | UPDATE [ OF column_name_list ] }
# 
# # Simqle re-defines this in the following way:
# # updateability_clause moves to zSelectStatement;
# # OF column_name_list is not supported in the current version (0.7)
# 
# forward references: CursorSpecification, AbstractCursorSpecification

<T> SelectStatement<T> ::=
    cspec:CursorSpecification<T> :: implicit {}
|
    cspec:CursorSpecification<T>  FOR READ ONLY ::
        import java.util.LinkedList;
        public AbstractSelectStatement<T> forReadOnly {}
|
    cspec:CursorSpecification<T> FOR UPDATE
        :: public AbstractSelectStatement<T> forUpdate {}
;


public interface CursorSpecification<T> : Query<T> {}

public class AbstractCursorSpecification<T> implements CursorSpecification<T> {}

# #zCursorSpecification ::= zQueryExpression [ zOrderByClause ] [ updatability_clause ]
# #updatability_clause moved to zSelectStatement
# 
# see QueryExpression.sdl, Sort.sdl

<T> CursorSpecification<T> ::=
    qe:QueryExpression<T> :: implicit {}
|
    qe:QueryExpressionScalar<T> :: implicit {}
|
    qe:QueryExpression<T> obc:OrderByClause :: protected AbstractCursorSpecification<T> orderBy {}
|
    qe:QuerySpecification<T> obc:OrderByClause :: protected AbstractCursorSpecification<T> orderBy {}
;

::  public <T> AbstractCursorSpecification<T> orderBy(final QueryExpression<T> qe, final SortSpecification sort, final SortSpecification... additionalSort) {
    SortSpecificationList list = createSortSpecificationList(sort);
     for (SortSpecification add: additionalSort) {
         list = appendSortSpecification(list, add);
     }
     return  orderBy(qe, createOrderByClause(list));
}

::  public <T> AbstractCursorSpecification<T> orderBy(final QuerySpecification<T> qe, final SortSpecification sort, final SortSpecification... additionalSort) {
    SortSpecificationList list = createSortSpecificationList(sort);
     for (SortSpecification add: additionalSort) {
         list = appendSortSpecification(list, add);
     }
     return  orderBy(qe, createOrderByClause(list));
}



