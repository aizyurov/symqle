public interface FromClause : Sql {}

# <from clause> ::= FROM <table reference list>
#
# <table reference list> ::= <table reference> [ { <comma> <table reference> }... ]
# Simqle does not support implicit cross joins, so this is simplified

FromClause ::= FROM t:TableReference :: implicit {}
;

# <table reference> ::= <table primary or joined table> [ <sample clause> ]
# Simqle does not support <sample clause>, so we are omitting <tableprimary or joined table>

public interface TableReference : Sql {}

TableReference ::=
    t:TablePrimary :: implicit {}
|
    t:JoinedTable :: implicit {}
;

# <table primary> ::=
#		<table or query name> [ [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ] ]
#	|	<derived table> [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ]
#	|	<lateral derived table> [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ]
#	|	<collection derived table> [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ]
#	|	<table function derived table> [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ]
#	|	<only spec> [ [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ] ]
#	|	<left paren> <joined table> <right paren>
#
# only the first one is supported, AS <correlation name> is always used <correlation name> is just Identifier

public interface TablePrimary : Sql {}

TablePrimary ::= t:TableName AS id:Identifier :: protected TablePrimary use {}
;

public interface TableName : Sql {}

# a simgle class Table implements both TableName and Join
# Tables are handled specially bu AutoFromClause

public class Table implements TableName, Join {}

# <joined table> ::=
#		<cross join>
#	|	<qualified join>
#	|	<natural join>
#	|	<union join>
#
# <cross join> ::= <table reference> CROSS JOIN <table primary>
#
# <qualified join> ::= <table reference> [ <join type> ] JOIN <table reference> <join specification>
#
# <natural join> ::= <table reference> NATURAL [ <join type> ] JOIN <table primary>
#
# <union join> ::= <table reference> UNION JOIN <table primary>
#
# Simqle supports only cross join and qualified join. We are introducing
# intermediate non-terminal Join, which is CROSS JOIN <table primary> or <join type> JOIN <table reference> <join specification>
# a limitation: in qualified join the second <table reference> can be only <table primary>
#
# <join specification> ::= <join condition> | <named columns join>
# Simqle does not support/use <named columns join>, so we are inlining <join condition> in Join productions


public interface JoinedTable : Sql {}

JoinedTable ::= t:TableReference j:Join :: protected JoinedTable join {}
;

public interface Join : Sql {}

Join ::=
    CROSS JOIN t:TablePrimary ::public Table crossJoin {}
|
    LEFT JOIN t:TablePrimary ON c:BooleanExpression ::public Table leftJoin {}
|
    RIGHT JOIN t:TablePrimary ON c:BooleanExpression :: public Table rightJoin {}
|
    OUTER JOIN t:TablePrimary ON c:BooleanExpression :: public Table outerJoin {}
|
    INNER JOIN t:TablePrimary ON c:BooleanExpression :: public Table innerJoin {}
;

import java.util.Map;
public class AutoFromClause implements FromClause {
    private final AutoFromClause parent;
    private Map<Table, String> localNames;

    public AutoFromClause() {
        this.parent = null;
    }

    public AutoFromClause(AutoFromClause parent) {
        this.parent = parent;
    }

    public String getCorrelationName(Table owner) {
        throw new RuntimeException("Not implemented");
    }

    @Override
    public Sql z$create$FromClause(final SqlContext context) {
        // TODO implement
        throw new RuntimeException("Not implemented");
    }
}

public class ImplicitFromClause implements FromClause {
            public Sql z$create$FromClause(SqlContext context) {
                return context.get(AutoFromClause.class).z$create$FromClause(context);
            }
}







