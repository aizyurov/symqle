public interface NumericExpression<T> extends Scalar<T>: Sql {}

public class AbstractNumericExpression<T> implements NumericExpression<T> {}

# implicit operations retain type argument
<T> NumericExpression<T> ::=
    t:Term<T> :: implicit {}
;

# all operations accept <? extends Number> and return <Number>
NumericExpression<Number> ::=
    e:NumericExpression<?> PLUS t:Term<?>
         :: public AbstractNumericExpression<Number> plus {
            public Number value(final Element element) throws SQLException {
                    return element.getBigDecimal();
            }
         }
|
    e:NumericExpression<?> MINUS t:Term<?>
         :: public AbstractNumericExpression<Number> minus {
            public Number value(final Element element) throws SQLException {
                    return element.getBigDecimal();
            }
         }
;


public interface Term<T> extends Scalar<T> : Sql {}

public class AbstractTerm<T> implements Term<T> {}

<T> Term<T> ::= f:Factor<T> :: implicit {}
;

Term<Number> ::=
    t:Term<?> ASTERISK f:Factor<?>
        :: public AbstractTerm<Number> mult {
                public Number value(final Element element) throws SQLException {
                        return element.getBigDecimal();
                }
        }
|
    t:Term<?> SOLIDUS f:Factor<?>
        :: public AbstractTerm<Number> div {
            public Number value(final Element element) throws SQLException {
                    return element.getBigDecimal();
            }
        }
;

public interface Factor<T> extends Scalar<T> : Sql {}

public class AbstractFactor<T> implements Scalar<T> {}

# negate retains type argument
<T> Factor<T> ::=
    p:NumericPrimary<T> :: implicit {}
;
<T extends Number> Factor<T> ::=
    MINUS p:NumericPrimary<T> :: protected AbstractFactor<T> negate {}
;

public interface NumericPrimary<T> extends Scalar<T> : Sql {}

# no abstract class for NumericPrimary: no methods but implicit conversion

# standard diffentiates <numeric function>. We do not create corresponding interface,
# <numeric function> is just a <routine invocation>, which is <value expression>

<T> NumericPrimary<T> ::= e:ValueExpressionPrimary<T> :: implicit {}
;
