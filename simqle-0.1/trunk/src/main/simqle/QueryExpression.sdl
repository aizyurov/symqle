
public interface QueryExpression<T> : Query<T> {}

public class AbstractQueryExpression<T> implements QueryExpression<T> {}

# we have different rules for QueryExpression and QueryExpressionScalar
# the first one is just QueryBase with (maybe) WhereClause
# the second one is really an expression, which may include union, intersection etc.
# see QueryBase.sdl, Where.sdl

<T> QueryExpression<T> ::=
    qb:QueryBase<T> :: implicit {}
|
    qb:QueryBase<T> wc:WhereClause :: public AbstractQueryExpression<T> where {}
|
    qs:QuerySpecification<T> :: implicit {}
;

public interface QueryExpressionScalar<T> extends Scalar<T> : Query<T> {}

public class AbstractQueryExpressionScalar<T> implements QueryExpressionScalar<T> {}

<T> QueryExpressionScalar<T> ::=
    qt:QueryTerm<T> :: implicit {}
|
    qe:QueryExpressionScalar<T> UNION ALL qt:QueryTerm<T> ::
        public AbstractQueryExpressionScalar<T> unionAll {
            public Query<T> z$create$QueryExpressionScalar(final SqlContext context) {
                // left and right parts have separate contexts
                final SqlContext leftContext = createScalarInnerContext(context);
                final SqlContext rightContext = createScalarInnerContext(context);
                // learning
                qe.z$create$QueryExpressionScalar(leftContext);
                qt.z$create$QueryTerm(rightContext);
                final Query<T> left = qe.z$create$QueryExpressionScalar(leftContext);
                final Query<T> right = qt.z$create$QueryTerm(rightContext);
                return new CompositeQuery<T>(left, UNION, ALL, right);
            }
        }
|
    qe:QueryExpressionScalar<T> UNION DISTINCT qt:QueryTerm<T> ::
        public AbstractQueryExpressionScalar<T> unionDistinct {
            public Query<T> z$create$QueryExpressionScalar(final SqlContext context) {
                // left and right parts have separate contexts
                final SqlContext leftContext = createScalarInnerContext(context);
                final SqlContext rightContext = createScalarInnerContext(context);
                // learning
                qe.z$create$QueryExpressionScalar(createScalarInnerContext(leftContext));
                qt.z$create$QueryTerm(createScalarInnerContext(rightContext));
                final Query<T> left = qe.z$create$QueryExpressionScalar(createScalarInnerContext(leftContext));
                final Query<T> right = qt.z$create$QueryTerm(createScalarInnerContext(rightContext));
                return new CompositeQuery<T>(left, UNION, DISTINCT, right);
            }
        }
|
    qe:QueryExpressionScalar<T> UNION qt:QueryTerm<T> ::
        public AbstractQueryExpressionScalar<T> union {
            public Query<T> z$create$QueryExpressionScalar(final SqlContext context) {
                // left and right parts have separate contexts
                final Query<T> left = qe.z$create$QueryExpressionScalar(createScalarInnerContext(context));
                final Query<T> right = qt.z$create$QueryTerm(createScalarInnerContext(context));
                return new CompositeQuery<T>(left, UNION, right);
            }
        }
|
    qe:QueryExpressionScalar<T> EXCEPT ALL qt:QueryTerm<T> ::
        public AbstractQueryExpressionScalar<T> exceptAll {
            public Query<T> z$create$QueryExpressionScalar(final SqlContext context) {
                // left and right parts have separate contexts
                final Query<T> left = qe.z$create$QueryExpressionScalar(createScalarInnerContext(context));
                final Query<T> right = qt.z$create$QueryTerm(createScalarInnerContext(context));
                return new CompositeQuery<T>(left, EXCEPT, ALL, right);
            }
        }
|
    qe:QueryExpressionScalar<T> EXCEPT DISTINCT qt:QueryTerm<T> ::
        public AbstractQueryExpressionScalar<T> exceptDistinct {
            public Query<T> z$create$QueryExpressionScalar(final SqlContext context) {
                // left and right parts have separate contexts
                final Query<T> left = qe.z$create$QueryExpressionScalar(createScalarInnerContext(context));
                final Query<T> right = qt.z$create$QueryTerm(createScalarInnerContext(context));
                return new CompositeQuery<T>(left, EXCEPT, DISTINCT, right);
            }
        }
|
    qe:QueryExpressionScalar<T> EXCEPT qt:QueryTerm<T> ::
        public AbstractQueryExpressionScalar<T> except {
            public Query<T> z$create$QueryExpressionScalar(final SqlContext context) {
                // left and right parts have separate contexts
                final SqlContext leftContext = createScalarInnerContext(context);
                final SqlContext rightContext = createScalarInnerContext(context);
                // learning
                leftContext.get(TableRegistry.class).setTestMode(true);
                rightContext.get(TableRegistry.class).setTestMode(true);
                qe.z$create$QueryExpressionScalar(leftContext);
                qt.z$create$QueryTerm(rightContext);

                leftContext.get(TableRegistry.class).setTestMode(false);
                rightContext.get(TableRegistry.class).setTestMode(false);
                final Query<T> left = qe.z$create$QueryExpressionScalar(leftContext);
                final Query<T> right = qt.z$create$QueryTerm(rightContext);
                return new CompositeQuery<T>(left, EXCEPT, right);
            }
        }
;

# zQueryTerm is always scalar; we do not add suffix _scalar for brevity
#
public interface QueryTerm<T> extends Scalar<T> :  Query<T> {}

public class AbstractQueryTerm<T> implements QueryTerm<T> {}

<T> QueryTerm<T> ::=
    qp:QueryPrimary<T> :: implicit {}
|
    qt:QueryTerm<T> INTERSECT ALL qp:QueryPrimary<T> ::
        public AbstractQueryTerm<T> intersectAll {
            public Query<T> z$create$QueryTerm(final SqlContext context) {
                final Query<T> left = qt.z$create$QueryTerm(createScalarInnerContext(context));
                final Query<T> right = qp.z$create$QueryPrimary(createScalarInnerContext(context));
                return new CompositeQuery<T>(left, INTERSECT, ALL, right);
            }
        }
|
    qt:QueryTerm<T> INTERSECT DISTINCT qp:QueryPrimary<T> ::
          public AbstractQueryTerm<T> intersectDistinct {
            public Query<T> z$create$QueryTerm(final SqlContext context) {
                final Query<T> left = qt.z$create$QueryTerm(createScalarInnerContext(context));
                final Query<T> right = qp.z$create$QueryPrimary(createScalarInnerContext(context));
                return new CompositeQuery<T>(left, INTERSECT, DISTINCT, right);
            }
          }
|
    qt:QueryTerm<T> INTERSECT qp:QueryPrimary<T> ::
          public AbstractQueryTerm<T> intersect {
            public Query<T> z$create$QueryTerm(final SqlContext context) {
                final Query<T> left = qt.z$create$QueryTerm(createScalarInnerContext(context));
                final Query<T> right = qp.z$create$QueryPrimary(createScalarInnerContext(context));
                return new CompositeQuery<T>(left, INTERSECT, right);
            }
          }
;

public interface QueryPrimary<T> extends Scalar<T>  : Query<T> {}

public class AbstractQueryPrimary<T> implements QueryPrimary<T> {}

<T> QueryPrimary<T> ::=
    qs:QuerySpecification<T> :: implicit {}
|
    LEFT_PAREN qe:QueryExpressionScalar<T> RIGHT_PAREN :: implicit {}
;

public interface QuerySpecification<T> extends Scalar<T> : Query<T> {}


public class AbstractQuerySpecification<T> implements QuerySpecification<T> {}

<T> QuerySpecification<T> ::=
    qb:QueryBaseScalar<T> :: implicit {}
|
    qb:QueryBaseScalar<T> wc:WhereClause ::
         public AbstractQuerySpecification<T> where {}
;


