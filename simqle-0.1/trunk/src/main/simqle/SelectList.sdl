
public interface SelectList<T> : Query<T> {}

public class AbstractSelectList<T> implements SelectList<T> {}

<T> SelectList<T> ::=
    sl:SelectSublist<T> :: implicit {}
;

# non-trivial construction of resulting Query; cannot be derived automatically
import org.simqle.Pair;
<T, U> SelectList<Pair<T, U>> ::= sl1:SelectList<T> COMMA sl2:SelectList<U> ::
    public AbstractSelectList<Pair<T, U>> pair {
            /**
            * Creates a Query representing <code>this</code>
            * @param context the Sql construction context
            * @return query conforming to <code>this</code> syntax
            */
            public Query<Pair<T, U>> z$create$SelectList(final SqlContext context) {
                final Query<T> query1 = sl1.z$create$SelectList(context);
                final Query<U> query2 = sl2.z$create$SelectList(context);
                DataExtractor<Pair<T, U>> extractor = new DataExtractor<Pair<T, U>>() {
                    @Override
                    public Pair<T, U> extract(Row row) throws SQLException {
                        return Pair.of(query1.extract(row), query2.extract(row));
                    }
                };
                return new ComplexQuery<Pair<T, U>>(extractor, context.get(Dialect.class).SelectList_is_SelectList_COMMA_SelectList(query1, query2));
            }
    }
;

public interface SelectSublist<T> extends Scalar<T> : Query<T> {}

public interface Identifier : Sql {}

import org.simqle.CustomSql;
public class DefinedIdentifier implements Identifier {
    private final String name;
    public DefinedIdentifier(final String name) {
        this.name = name;
    }
    public Sql z$create$Identifier(final SqlContext context) {
        return new CustomSql(name);
    }
}

<T> SelectSublist<T> ::= ve:ValueExpression<T> ::
    implicit {
            /**
            * Creates a Query representing <code>this</code>
            * @param context the Sql construction context
            * @return query conforming to <code>this</code> syntax
            */
            public Query<T> z$create$SelectSublist(final SqlContext context) {
                final UniqueNameProvider nameProvider = context.get(UniqueNameProvider.class);
                if (nameProvider == null) {
                    return new ComplexQuery<T>(new NullDataExtractor<T>(), ve.z$create$ValueExpression(context));
                } else {
                    final String name = nameProvider.getUniqueName();
                    return new ComplexQuery<T>(new DataExtractor<T>(){
                                @Override
                                public T extract(Row row) throws SQLException {
                                    return getElementMapper().value(row.getValue(name));
                                }
                            },
                            ve.z$create$ValueExpression(context),
                            AS,
                            new CustomSql(name));
                }           
            }
    }
|
    ve:ValueExpression<T> AS id:Identifier
;


