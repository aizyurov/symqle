
public interface SelectList<T> : Query<T> {}

public class AbstractSelectList<T> implements SelectList<T> {}

<T> SelectList<T> ::=
    sl:SelectSublist<T> :: implicit {}
;

# non-trivial construction of resulting Query; cannot be derived automatically
import org.simqle.Pair;
<T, U> SelectList<Pair<T, U>> ::= sl1:SelectList<T> COMMA sl2:SelectList<U> ::
    public AbstractSelectList<Pair<T, U>> pair {
            /**
            * Creates a Query representing <code>this</code>
            * @param context the Sql construction context
            * @return query conforming to <code>this</code> syntax
            */
            public Query<Pair<T, U>> z$create$SelectList(final SqlContext context) {
                final Query<T> query1 = sl1.z$create$SelectList(context);
                final Query<U> query2 = sl2.z$create$SelectList(context);
                DataExtractor<Pair<T, U>> extractor = new DataExtractor<Pair<T, U>>() {
                    @Override
                    public Pair<T, U> extract(Row row) throws SQLException {
                        return Pair.of(query1.extract(row), query2.extract(row));
                    }
                };
                return new ComplexQuery<Pair<T, U>>(extractor, query1, COMMA, query2);
            }/*delegation*/
    }
;

import org.simqle.Function;
:: public <T, U> AbstractSelectList<U> convert(final SelectList<T> source, final Function<T, U> converter) {
    return new AbstractSelectList<U>(){
        @Override
        public Query<U> z$create$SelectList(SqlContext context) {
            final Query<T> query = source.z$create$SelectList(context);
            final DataExtractor<U> extractor = new DataExtractor<U>() {
                @Override
                public U extract(Row row) throws SQLException {
                    return converter.apply(query.extract(row));
                }
            };
            return new ComplexQuery<U>(extractor, query);
        }
    };
}

public interface SelectSublist<T> extends Scalar<T> : Query<T> {}

public class AbstractSelectSublist<T> implements SelectSublist<T> {}

public interface Identifier : Sql {}

import org.simqle.CustomSql;
public class DefinedIdentifier implements Identifier {
    private final String name;
    public DefinedIdentifier(final String name) {
        this.name = name;
    }
    public Sql z$create$Identifier(final SqlContext context) {
        return new CustomSql(name);
    }
}

<T> SelectSublist<T> ::= ve:ValueExpression<T> AS id:Identifier ::
    protected SelectSublist<T> makeSelectSublist {
            /**
            * Creates a Query representing <code>this</code>
            * @param context the Sql construction context
            * @return query conforming to <code>this</code> syntax
            */
            public Query<T> z$create$SelectSublist(final SqlContext context) {
                final String name = id.z$create$Identifier(context).getSqlText();
                final DataExtractor<T> extractor = new DataExtractor<T>() {
                    @Override
                    public T extract(Row row) throws SQLException {
                        return ve.value(row.getValue(name));
                    }
                };
                return new ComplexQuery<T>(extractor, ve.z$create$ValueExpression(context), AS, id.z$create$Identifier(context));
            }/*delegation*/
    }
|
# overloaded
    ve:ValueExpression<T> ::
    protected SelectSublist<T> makeSelectSublist {
            /**
            * Creates a Query representing <code>this</code>
            * @param context the Sql construction context
            * @return query conforming to <code>this</code> syntax
            */
            public Query<T> z$create$SelectSublist(final SqlContext context) {
                return new ComplexQuery<T>(new NullDataExtractor(), ve.z$create$ValueExpression(context));
            }/*delegation*/
    }
;

# implicit conversion of ValueExpression to SelectSublist
# adds AS if needed (in outer context)
# in inner contexts does not add AS
:: <T> AbstractSelectSublist<T> select (final ValueExpression<T> ve) {
    return new AbstractSelectSublist<T>(){
        @Override
        public Query<T> z$create$SelectSublist(SqlContext context) {
            final UniqueNameProvider nameProvider = context.get(UniqueNameProvider.class);
            if (nameProvider == null) {
                return makeSelectSublist(ve).z$create$SelectSublist(context);
            } else {
                return makeSelectSublist(ve, new DefinedIdentifier(nameProvider.getUniqueName())).z$create$SelectSublist(context);
            }
        }

        @Override
        public T value(Element element) throws SQLException {
            return ve.value(element);
        }
    };
}

# a convenience method: need not explicit select()
::     public <T> AbstractQuerySpecification<T> where(final ValueExpression<T> ve, final WhereClause wc) {
        return where(z$QueryBaseScalar$from$SelectSublist(select(ve)), wc);
    }


