public interface ScalarSubquery<T> extends Scalar<T> : Sql {}

public class AbstractScalarSubquery<T> implements ScalarSubquery<T> {}

<T> ScalarSubquery<T> ::= LEFT_PAREN qe:QueryExpressionScalar<T> RIGHT_PAREN ::
        import org.simqle.ColumnNameProvider;
        import org.simqle.NullColumnNameProvider;
        implicit
        {
         public Sql z$create$zScalarSubquery(SqlContext context) {
             SqlContext innerContext = new SqlContext();
             innerContext.set(ColumnNameProvider.class, new NullColumnNameProvider());
             innerContext.set(Simqle.class, context.get(Simqle.class));
             // create an empty FromClase for QueryExpressionScalar with current FromClause as enclosing
             innerContext.set(FromClause.class, new AutoFromClause(context.get(AutoFromClause.class)));
             final Sql base = qe.z$create$QueryExpressionScalar(innerContext);
             return new CompositeSql(LEFT_PAREN, base, RIGHT_PAREN);
         }
}
;


# interface zSubquery<T> : Sql
# {}
# 
# class Subquery<T> implements zSubquery<T> with sqlBuilder
# {}
# 
# 
# <T> zScalarSubquery<T> ::= LEFT_PAREN qe:zQueryExpressionScalar<T> RIGHT_PAREN
# {
#     return new zScalarSubquery<T>() {
#         @Override
#         public Sql z$create$zScalarSubquery(SqlContext context) {
#             SqlContext innerContext = new SqlContext();
#             innerContext.set(ColumnNameProvider.class, new NullColumnNameProvider());
#             innerContext.set(SqlFactory.class, context.get(SqlFactory.class));
#             // create an empty FromClase for zQueryExpressionScalar with current FromClause as enclosing
#             innerContext.set(FromClause.class, new FromClause(context.get(FromClause.class)));
#             qe.z$prepare$zQueryExpressionScalar(innerContext);
#             final Query<T> base = qe.z$create$zQueryExpressionScalar(innerContext);
#             return new CompoundQuery(base, new CompositeSql(LEFT_PAREN, base, RIGHT_PAREN));
#         }
# 
#             @Override
#         public void z$prepare$zScalarSubquery(SqlContext context) {
#             // do nothing
#         }
# 
#             @Override
#         public T value(final Element element) throws SQLException {
#             return qe.value(element);
#         }
#     };
# }
#     :: QueryExpressionScalar<T> mimics ScalarSubquery<T>
#     {}
# ;
# 
# <T> zSubquery<T> ::= LEFT_PAREN qe:zQueryExpression<T> RIGHT_PAREN
# {
#     return new zSubquery<T>() {
#             @Override
#         public Sql z$create$zSubquery(SqlContext context) {
#             SqlContext innerContext = new SqlContext();
#             innerContext.set(ColumnNameProvider.class, new NullColumnNameProvider());
#             innerContext.set(SqlFactory.class, context.get(SqlFactory.class));
#             // create an empty FromClase for zQueryExpressionScalar with current FromClause as enclosing
#             innerContext.set(FromClause.class, new FromClause(context.get(FromClause.class)));
#             qe.z$prepare$zQueryExpression(innerContext);
#             final Query<T> base = qe.z$create$zQueryExpression(innerContext);
#             return new CompoundQuery(base, new CompositeSql(LEFT_PAREN, base, RIGHT_PAREN));
#         }
# 
#             @Override
#         public void z$prepare$zSubquery(SqlContext context) {
#             // do nothing
#         }
#     };
# 
# }
#     :: QueryExpression<T> mimics Subquery<T>
#     {}
# | ss:zScalarSubquery<T>
#     :: ScalarSubquery<T> mimics Subquery<T>
#     {}
# ;
# 
