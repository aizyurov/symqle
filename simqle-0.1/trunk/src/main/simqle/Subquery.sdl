public interface ScalarSubquery<T> extends Scalar<T> : Sql {}

public class AbstractScalarSubquery<T> implements ScalarSubquery<T> {}

<T> ScalarSubquery<T> ::= LEFT_PAREN qe:QueryExpressionScalar<T> RIGHT_PAREN ::
        import org.simqle.ColumnNameProvider;
        implicit
        {
         public Sql z$create$zScalarSubquery(SqlContext context) {
             SqlContext innerContext = new SqlContext();
             innerContext.set(ColumnNameProvider.class, null);
             innerContext.set(Simqle.class, context.get(Simqle.class));
             // create an empty FromClase for QueryExpressionScalar with current FromClause as enclosing
             innerContext.set(FromClause.class, new AutoFromClause(context.get(AutoFromClause.class)));
             final Sql base = qe.z$create$QueryExpressionScalar(innerContext);
             return new CompositeSql(LEFT_PAREN, base, RIGHT_PAREN);
         }
}
;


# todo Row subqueries support