public interface ValueExpression<T> extends Scalar<T> : Sql {}

public class AbstractValue<T> implements ValueExpression<T> {}

# Hierarchy of ValueExpression approximately follws SQL standard.
# For some interfaces type parameters are bounded
# <row value expression> is not considered being <value expression>
# it is not Scalar and we have different rules for RowValueExpression and ValueExpression

<T> ValueExpression<T> ::= cve:CommonValueExpression<T> :: implicit {}
;

# see BooleanValueExpression.sdl
ValueExpression<Boolean> ::=  bve:BooleanExpression :: implicit {}
;

# no abstract class: no methods
public interface CommonValueExpression<T> extends Scalar<T> : Sql {}

#
# public interface zRoutineName<T> extends Scalar<T> : Sql
# {}
# 
# public interface zArgumentList : Sql
#  {}
# 
# # zArgumentList is used only internally by Function; no implementing class
# zArgumentList ::= ve:zValueExpression<?>
#     | al:zArgumentList COMMA ve:zValueExpression<?>
# ;
# 
# public class RoutineInvocation<T> implements zRoutineInvocation<T> with sqlBuilder
# {}
# 
# public abstract class Function<T> implements zRoutineName<T>
# {
#     private final zRoutineName routineName;
#     protected Function$(final String name) {
#         routineName = new zRoutineName<T>() {
#             @Override
#             public Sql z$create$zRoutineName(final SqlContext context) {
#                 return new Identifier(name);
#             }
# 
#             @Override
#             public void z$prepare$zRoutineName(final SqlContext context) {
#                 // do nothing
#             }
# 
#             @Override
#             public T value(final Element element) throws SQLException {
#                 return Function$.this.value(element);
#             }
#         };
#     }
# 
#     @Override
#     public final void z$prepare$zRoutineName(final SqlContext context) {
#        routineName.z$prepare$zRoutineName(context);
#     }
# 
#     @Override
#     public final Sql z$create$zRoutineName(final SqlContext context) {
#         return routineName.z$create$zRoutineName(context);
#     }
# 
# 
#         /**
#         * To be implemented in derived classes.
#         *
#         */
#     public abstract T value(final Element element) throws SQLException ;
# 
# }
# 
