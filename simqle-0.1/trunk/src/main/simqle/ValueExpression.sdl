public interface ValueExpression<T> extends Scalar<T> : Sql {}

// public class AbstractValue<T> implements ValueExpression<T> {}

# Hierarchy of ValueExpression approximately follows SQL standard.
# For some interfaces type parameters are bounded
# <row value expression> is not considered being <value expression>
# it is not Scalar and we have different rules for RowValueExpression and ValueExpression

<T> ValueExpression<T> ::=
    e:NumericExpression<T> :: implicit {}
|
    e:StringExpression<T> :: implicit {}
|
    e:ValueExpressionPrimary<T> :: implicit {}
;

# see BooleanValueExpression.sdl
ValueExpression<Boolean> ::=  bve:BooleanExpression :: implicit {}
;

# no abstract class: no methods
public interface CommonValueExpression<T> extends Scalar<T> : Sql {}

public interface StringExpression<T> extends Scalar<T> : Sql {}

public class AbstractStringExpression<T> implements StringExpression<T> {}

<T> StringExpression<T> ::=
    p:ValueExpressionPrimary<T> :: implicit {}
;

StringExpression<String> ::=
    s:StringExpression<?> CONCAT e:ValueExpressionPrimary<?>
        :: public AbstractStringExpression<String> concat {
                public ElementMapper<String> getElementMapper() {
                    return Mappers.STRING;
                }
        }
;

:: public AbstractStringExpression<String> concat(final StringExpression<?> e, final String s) {
    return concat(e,  DynamicParameter.create(Mappers.STRING, s));
}

