public interface ValueExpressionPrimary<T> extends Scalar<T> : Sql {}

public class AbstractValueExpressionPrimary<T> implements ValueExpressionPrimary<T>  {}

<T> ValueExpressionPrimary<T> ::=
    LEFT_PAREN e:ValueExpression<T> RIGHT_PAREN :: implicit {}
|
    p:DynamicParameterSpecification<T> :: implicit {}
|
	c:ColumnReference<T> :: implicit {}
|
	s:ScalarSubquery<T> :: implicit {}
|
	r:RoutineInvocation<T> :: implicit {}
;


public interface DynamicParameterSpecification<T> extends Scalar<T> : Sql {}

import org.simqle.SqlParameter;
import org.simqle.SqlParameters;
public abstract class DynamicParameter<T> implements DynamicParameterSpecification<T> {

            /**
            * Creates an Sql representing <code>this</code>
            * @param context the Sql construction context
            * @return sql conforming to <code>this</code> syntax
            */
            public final Sql z$create$DynamicParameterSpecification(SqlContext context) {
                return new Sql() {
                    @Override
                    public String getSqlText() {
                        return "?";
                    }

                    @Override
                    public void setParameters(final SqlParameters p) {
                        set(p.next());
                    }
                };
            }

            /**
            * Implement in derived classes
            */
            protected abstract void set(final SqlParameter p);
            /**
            * Implement in derived classes
            */
             public abstract T value(final Element element) throws SQLException ;

}

public interface ColumnReference<T> extends Scalar<T> : Sql {}

import org.simqle.CompositeSql;
import org.simqle.SqlTerm;
public abstract class Column<T> implements ColumnReference<T> {
     private final Identifier columnName;
     private final Table owner;

     protected Column(final String name,  final Table owner)  {
             this.columnName = new DefinedIdentifier(name);
             this.owner = owner;
         }

    public Sql z$create$ColumnReference(SqlContext context) {
        final String correlationName = context.get(AutoFromClause.class).getCorrelationName(owner);
        return new CompositeSql(new DefinedIdentifier(correlationName).z$create$Identifier(context),
                            SqlTerm.PERIOD,
                            columnName.z$create$Identifier(context));

    }

     public abstract T value(final Element element) throws SQLException ;
}


public interface RoutineInvocation<T> extends Scalar<T> : Sql {}

<T> RoutineInvocation<T> ::=
    rn:RoutineName<T> LEFT_PAREN al:ArgumentList RIGHT_PAREN
        :: RoutineInvocation<T> invoke {}
|
    rn:RoutineName<T> LEFT_PAREN RIGHT_PAREN
        :: RoutineInvocation<T> invoke {}
;

:: <T> RoutineInvocation<T> apply(RoutineName<T> routine, ValueExpression<?>... arg) {
    if (arg.length == 0) {
        return invoke(routine);
    } else {
        ArgumentList al = z$ArgumentList$from$ValueExpression(arg[0]);
        int i;
        for (i=1; i<arg.length; i++) {
            al = appendArgument(al, arg[i]);
        }
        return invoke(routine, al);
    }
}

public interface RoutineName<T> extends Scalar<T> : Sql {}

public interface ArgumentList : Sql {}

ArgumentList ::=
    e:ValueExpression<?> :: implicit {}
|
    al:ArgumentList COMMA e:ValueExpression<?>
    :: protected ArgumentList appendArgument {}
;

import org.simqle.CustomSql;
public abstract class FunctionCall<T> implements RoutineName<T> {
    private final String name;

    protected FunctionCall(String name) {
        this.name = name;
    }

    /**
    * Creates an Sql representing <code>this</code>
    * @param context the Sql construction context
    * @return sql conforming to <code>this</code> syntax
    */
    public Sql z$create$RoutineName(SqlContext context) {
        return new CustomSql(name);
    }
}





