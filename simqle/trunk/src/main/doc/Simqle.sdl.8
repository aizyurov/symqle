/* this is for reference, we start from these targets
direct_SQL_data_statement ::=
// delete_statement:_searched
		delete_statement
// direct_select_statement:_multiple_rows
	|	select_statement
	|	insert_statement
// update_statement:_searched
	|	update_statement
// to be supported in the next version
	|	merge_statement
// not supported
	|	temporary_table_declaration
*/

interface select_statement<T> (Query<T>) ;

class SelectStatement<T> implements select_statement<T> with sqlBuilder
import java.util.List;
import java.util.LinkedList;
import java.sql.SQLException;
{
    // TODO add scroll
    public List<T> list(final Database database)  throws SQLException {
        final SqlContext context = new SqlContext();
        context.set(FromClause.class, new FromClause());
        context.set(ColumnNameProvider.class, new ColumnNameProvider());
        this.z$prepare$select_statement(context);
        final List<T> list = new LinkedList<T>();
        final Query<T> query = this.z$create$select_statement(context);
        database.query(query, new IteratorCallback<Row>() {
            public int iterate(final Row row) throws SQLException {
                list.add(query.extract(row));
                return 1;
            }
        });
        return list;
    }
}
;


/*
direct_select_statement:_multiple_rows ::= zCursorSpecification
zCursorSpecification ::= zQueryExpression [ order_by_clause ] [ updatability_clause ]
updatability_clause ::= FOR { READ ONLY | UPDATE [ OF column_name_list ] }

Simqle re-defines this in the following way:
updateability_clause moves to select_statement;
OF column_name_list is not supported in the current version (0.7)
*/
<T> select_statement<T> ::= zCursorSpecification<T>
    ( SelectStatement<T> ::= CursorSpecification<T> )

| zCursorSpecification<T>  FOR READ ONLY
    ( + CursorSpecification<T> )
    {
        public SelectStatement<T> forReadOnly() {
            final SqlFactory factory = SqlFactory.getInstance();
            return new SelectStatement<T>(factory._THIS_PRODUCTION_(this));
        }
    }

| zCursorSpecification<T> FOR UPDATE
    ( + CursorSpecification<T> )
    {
        public SelectStatement<T> forUpdate() {
            final SqlFactory factory = SqlFactory.getInstance();
            return new SelectStatement<T>(factory._THIS_PRODUCTION_(this));
        }
    }
;

interface zCursorSpecification<T> (Query<T>) ;

class CursorSpecification<T> implements zCursorSpecification<T> with sqlBuilder
import java.util.List;
import java.sql.SQLException;
{};

/*
zCursorSpecification ::= zQueryExpression [ order_by_clause ] [ updatability_clause ]
updatability_clause moved to select_statement
zCursorSpecification_scalar introduced
*/

<T> zCursorSpecification<T> ::= zCursorSpecification_scalar<T>
    ( CursorSpecification<T> ::= CursorSpecificationScalar<T> )

| zQueryExpression<T>
      ( CursorSpecification<T> ::= QueryExpression<T> )

| zQueryExpression<T> order_by_clause
        ( + QueryExpression<T> )
        {
            // TODO: add arguments and implement
            CursorSpecification<T> orderBy() {
                throw new RuntimeException("FIXME");
            }
        }
;


interface zCursorSpecification_scalar<T> (Query<T>) extends Scalar<T> ;

class CursorSpecificationScalar<T> implements zCursorSpecification_scalar<T> with sqlBuilder
import java.util.List;
import java.sql.SQLException;
{};

interface zQueryExpression<T> (Query<T>) ;

class QueryExpression<T> implements zQueryExpression<T> with sqlBuilder
import java.util.List;
import java.sql.SQLException;
{};


/*
zQueryExpressionScalar introduced
It does not have its own orderBy;
 it is inherited from zQueryExpression
 ( and scalar context is lost)

*/
<T> zCursorSpecification_scalar<T> ::= zQueryExpressionScalar<T>
      ( CursorSpecificationScalar<T> ::= QueryExpressionScalar<T> )

| zQueryExpressionScalar<T> order_by_clause
        ( + QueryExpressionScalar<T> )
        {
            // TODO: add arguments and implement
            CursorSpecificationScalar<T> orderBy() {
                throw new RuntimeException("FIXME");
            }
        }
;


interface zQueryExpressionScalar<T> (Query<T>) extends Scalar<T> ;

class QueryExpressionScalar<T> implements zQueryExpressionScalar<T> with sqlBuilder
import java.util.List;
import java.sql.SQLException;
{};

/*
zQueryExpression ::= [ with_clause ] zQueryExpression_body
zQueryExpression_body ::= non-join_zQueryExpression | joined_table

with_clause and joined_table are not supported (not needed)
union, intersect and except are supported only for scalars
so, the syntax is simplified
*/


<T> zQueryExpression<T> ::= zQueryExpressionScalar<T>
    ( QueryExpression<T> ::= QueryExpressionScalar<T> )

|  zQueryPrimary<T>
    ( QueryExpression<T> ::= QueryPrimary<T> )
;

/*
non-join_zQueryExpression ::=
		non-join_zQueryTerm
	|	zQueryExpression_body UNION [ ALL | DISTINCT ] [ corresponding_spec ] zQueryTerm
	|	zQueryExpression_body EXCEPT [ ALL | DISTINCT ] [ corresponding_spec ] zQueryTerm
*/

<T> zQueryExpressionScalar<T> ::= zQueryTerm<T>
    ( QueryExpressionScalar<T> ::= QueryTerm<T> )

|    zQueryExpressionScalar<T> UNION ALL zQueryTerm<T>
    ( + QueryExpressionScalar<T> )
    {
    public QueryExpressionScalar<T> unionAll(zQueryTerm<T> queryTerm) {
        return new QueryExpressionScalar<T>(
            SqlFactory.getInstance()._THIS_PRODUCTION_(this, queryTerm)
            );
        }
    }

|    zQueryExpressionScalar<T> UNION DISTINCT zQueryTerm<T>
    ( + QueryExpressionScalar<T> )
    {
    public QueryExpressionScalar<T> unionDistinct(zQueryTerm<T> queryTerm) {
        return new QueryExpressionScalar<T>(
            SqlFactory.getInstance()._THIS_PRODUCTION_(this, queryTerm)
            );
        }
    }

|    zQueryExpressionScalar<T> EXCEPT ALL zQueryTerm<T>
    ( + QueryExpressionScalar<T> )
    {
    public QueryExpressionScalar<T> exceptAll(zQueryTerm<T> queryTerm) {
        return new QueryExpressionScalar<T>(
            SqlFactory.getInstance()._THIS_PRODUCTION_(this, queryTerm)
            );
        }
    }

|    zQueryExpressionScalar<T> EXCEPT DISTINCT zQueryTerm<T>
    ( + QueryExpressionScalar<T> )
    {
    public QueryExpressionScalar<T> exceptDistinct(zQueryTerm<T> queryTerm) {
        return new QueryExpressionScalar<T>(
            SqlFactory.getInstance()._THIS_PRODUCTION_(this, queryTerm)
            );
        }
    }
;

interface zQueryTerm<T> (Query<T>) extends Scalar<T> ;

class QueryTerm<T> implements zQueryTerm<T> with SqlBuilder
 import java.util.List;
 import java.sql.SQLException;
{};

<T> zQueryTerm<T> ::= zQueryPrimaryScalar<T>
    ( QueryTerm<T> ::= QueryPrimaryScalar<T> )

|   zQueryTerm<T> INTERSECT ALL zQueryPrimaryScalar<T>
    ( + QueryTerm<T> )
     {
         public QueryTerm<T> intersectAll(final zQueryPrimaryScalar<T> qps) {
            return new QueryTerm<T>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, qps));
         }
     }

|   zQueryTerm<T> INTERSECT DISTINCT zQueryPrimaryScalar<T>
    ( + QueryTerm<T> )
     {
         public QueryTerm<T> intersectDistinct(final zQueryPrimaryScalar<T> qps) {
            return new QueryTerm<T>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, qps));
         }
     }
;

interface zQueryPrimary<T> (Query<T>) ;
class QueryPrimary<T> implements zQueryPrimary<T> with sqlBuilder
 import java.util.List;
 import java.sql.SQLException;
{};

/*
zQueryPrimary ::= non-join_zQueryPrimary | joined_table

non-join_zQueryPrimary ::= simple_table | left_paren non-join_zQueryExpression right_paren

simple_table ::=
		query_specification
	|	table_value_constructor
	|	explicit_table
Only simple_table -> query_specification is supported
*/

<T> zQueryPrimary<T> ::= query_specification<T>
    ( QueryPrimary<T> ::= QuerySpecification<T> )
;


interface zQueryPrimaryScalar<T> (Query<T>) extends Scalar<T> ;

class QueryPrimaryScalar<T> implements zQueryPrimaryScalar<T> with sqlBuilder ;

<T> zQueryPrimaryScalar<T> ::= zQuerySpecificationScalar<T>
    ( QueryPrimaryScalar<T> ::= QuerySpecificationScalar<T> )

|  LEFT_PAREN zQueryExpressionScalar<T> RIGHT_PAREN
{
public Query<T> z$create$zQueryPrimaryScalar(SqlContext context) {
    final Query<T> base = arg0.z$create$zQueryExpressionScalar(context);
    return new CompoundQuery<T>(base, new CompositeSql(LEFT_PAREN, base, RIGHT_PAREN));
        }
}
    ( QueryPrimaryScalar<T> ::= QueryExpressionScalar<T> )
;


interface query_specification<T> (Query<T>) ;

class QuerySpecification<T> implements query_specification<T> with sqlBuilder ;

interface zQuerySpecificationScalar<T> (Query<T>) extends Scalar<T> ;

class QuerySpecificationScalar<T> implements zQuerySpecificationScalar<T> with sqlBuilder ;

/*
query_specification ::= SELECT [ set_quantifier ] zSelectList table_expression
set_quantifier ::= DISTINCT | ALL


table_expression ::=
		zFromClause
		[ where_clause ]
		[ group_by_clause ]
		[ having_clause ]
		[ window_clause ]

This has been reformulated as follows:
1. Remove group_by_clause, having_clause, window_clause - not supported
2. Inline table_expression
query_specification ::= SELECT [ set_quantifier ] zSelectList zFromClause [where_clause]
3. Introduce new non-terminal:
zQueryBase ::= SELECT [ set_quantifier ] zSelectList zFromClause
query_specification ::= zQueryBase
 		|  zQueryBase where_clause
4. Inline set_quantifier in zQueryBase

Scalar counterparts productions are alike.
*/

<T> query_specification<T> ::= zQueryBase<T>
    ( QuerySpecification<T> ::= QueryBase<T> )

  |  zQueryBase<T> where_clause
    ( + QueryBase<T> )
    {
        public QuerySpecification<T> where(where_clause condition) {
            return new QuerySpecification<T>(
                SqlFactory.getInstance()._THIS_PRODUCTION_(this, condition)
                );
        }
    }
;

<T> zQuerySpecificationScalar<T> ::= zQueryBaseScalar<T>
    ( QuerySpecificationScalar<T> ::= QueryBaseScalar<T> )

  |  zQueryBaseScalar<T> where_clause
    ( + QueryBaseScalar<T> )
    {
        public QuerySpecificationScalar<T> where(where_clause condition) {
            return new QuerySpecificationScalar<T>(
                SqlFactory.getInstance()._THIS_PRODUCTION_(this, condition)
                );
        }
    }
;

interface zQueryBase<T> (Query<T>) ;
interface zQueryBaseScalar<T> (Query<T>) extends Scalar<T>;

class QueryBase<T> implements zQueryBase<T> with sqlBuilder;

class QueryBaseScalar<T> implements zQueryBaseScalar<T> with sqlBuilder;

<T> zQueryBase<T> ::= SELECT zSelectList<T> zFromClause
{
public Query<T> z$create$zQueryBase(SqlContext context) {
    final Query<T> selectListQuery = arg0.z$create$zSelectList(context);
    return new CompoundQuery<T>(selectListQuery, new CompositeSql(SELECT, selectListQuery, arg1.z$create$zFromClause(context)));
        }
}
    ( QueryBase<T> ::= RowValue<T> ) {
    // this is a tricky part. The user never supplies zFromClause,
    // we are extracting it from Sqlcontext. So, we have only one argument
    // and can implement it transparently
    // but we have to write code of toQueryBase manually
    // providing an instance of ImplicitFromClause
        private final QueryBase<T> toQueryBase() {
            zFromClause fromClause = new ImplicitFromClause();
            return new QueryBase<T>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, fromClause));
        }
    }

| SELECT ALL zSelectList<T> zFromClause
{
public Query<T> z$create$zQueryBase(SqlContext context) {
    final Query<T> selectListQuery = arg0.z$create$zSelectList(context);
    return new CompoundQuery<T>(selectListQuery, new CompositeSql(SELECT, ALL, selectListQuery, arg1.z$create$zFromClause(context)));
        }
}
     ( + RowValue<T> )
     {
        public QueryBase<T> all() {
            zFromClause fromClause = new ImplicitFromClause();
            return new QueryBase<T>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, fromClause));
        }
     }

| SELECT DISTINCT zSelectList<T> zFromClause
{
public Query<T> z$create$zQueryBase(SqlContext context) {
    final Query<T> selectListQuery = arg0.z$create$zSelectList(context);
    return new CompoundQuery<T>(selectListQuery, new CompositeSql(SELECT, ALL, selectListQuery, arg1.z$create$zFromClause(context)));
        }
}
     ( + RowValue<T> )
     {
        public QueryBase<T> distinct() {
            zFromClause fromClause = new ImplicitFromClause();
            return new QueryBase<T>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, fromClause));
        }
     }
;


/* scalar counterpart of zSelectList is zSelectSublist rather than zSelectList_scalar */

<T> zQueryBaseScalar<T> ::= SELECT zSelectSublist<T> zFromClause
{
public Query<T> z$create$zQueryBaseScalar(SqlContext context) {
    final Query<T> sql0 = arg0.z$create$zSelectSublist(context);
    final Sql sql1 = arg1.z$create$zFromClause(context);
    return new CompoundQuery<T>(sql0, new CompositeSql(SELECT, sql0, sql1));
        }
}
    ( QueryBaseScalar<T> ::= SelectSublist<T> ) {
    // see comments to RowValue#toQueryBase()
        private final QueryBaseScalar<T> toQueryBaseScalar() {
            zFromClause fromClause = new ImplicitFromClause();
            return new QueryBaseScalar<T>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, fromClause));
        }
    }

| SELECT ALL zSelectSublist<T> zFromClause
{
public Query<T> z$create$zQueryBaseScalar(SqlContext context) {
    final Query<T> sql0 = arg0.z$create$zSelectSublist(context);
    final Sql sql1 = arg1.z$create$zFromClause(context);
    return new CompoundQuery<T>(sql0, new CompositeSql(SELECT, ALL, sql0, sql1));
        }
}
     ( + Value<T> )
     {
        public QueryBaseScalar<T> all() {
            zFromClause fromClause = new ImplicitFromClause();
            return new QueryBaseScalar<T>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, fromClause));
        }
     }

| SELECT DISTINCT zSelectSublist<T> zFromClause
{
public Query<T> z$create$zQueryBaseScalar(SqlContext context) {
    final Query<T> sql0 = arg0.z$create$zSelectSublist(context);
    final Sql sql1 = arg1.z$create$zFromClause(context);
    return new CompoundQuery<T>(sql0, new CompositeSql(SELECT, DISTINCT, sql0, sql1));
        }
}
     ( + Value<T> )
     {
        public QueryBaseScalar<T> distinct() {
            zFromClause fromClause = new ImplicitFromClause();
            return new QueryBaseScalar<T>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, fromClause));
        }
     }
;


interface zSelectList<T> (Query<T>) ;

/*
A single class RowValue represents both zSelectList and row_value_expression.
A more expressive and neutral name given.
*/

class RowValue<T> implements zSelectList<T> with selectList, row_value_expression<T>
 {
    public Sql z$create$row_value_expression(final SqlContext context) {
        // This is tricky: we form a new SqlContext without
        // ColumnNameProvider
        // then delegate to selectList
        // with this fake context AS ... are not generate,
        // so we get exactly what we need
        SqlContext fakeContext = new SqlContext();
        fakeContext.set(SqlFactory.class, context.get(SqlFactory.class));
        fakeContext.set(FromClause.class, context.get(FromClause.class));
        return this.selectList.z$create$zSelectList(fakeContext);
    }

    public void z$prepare$row_value_expression(final SqlContext context) {
        // same as prepare context wof zSelectList
        z$prepare$zSelectList(context);
    }
}
;


/**
zSelectList ::= asterisk | zSelectSublist [ { comma zSelectSublist }... ]

the first rule is not supported (used internally bypassing the API)
The last one is translated to equivalent non-deterministic rule (but we do not care)
*/

<T> zSelectList<T> ::= zSelectSublist<T>
    ( RowValue<T> ::= SelectSublist<T> )
;

<T,U> zSelectList<Pair<T,U>> ::= zSelectList<T> COMMA zSelectList<U>
{
    public Query<Pair<T,U>> z$create$zSelectList(final SqlContext context) {
        final Query<T> sql0 = arg0.z$create$zSelectList(context);
        final Query<U> sql1 = arg1.z$create$zSelectList(context);
        DataExtractor<Pair<T,U>> extractor = new DataExtractor<Pair<T, U>>() {
            public Pair<T, U> extract(final Row row) throws SQLException {
                final T first = sql0.extract(row);
                final U second = sql1.extract(row);
                return Pair.of(first, second);
            }
        };
        return new CompoundQuery<Pair<T,U>>(extractor, new CompositeSql(sql0, SqlTerminal.COMMA, sql1));
    }
}
 // more naturally implemented as static method of Values class:
 // RowValue<Pair<L,R> pairOf(RowValue<L> l, RowValue<R> r);
 // so no class member method is defined for this production
;

interface zSelectSublist<T> (Query<T>) extends Scalar<T> ;
class SelectSublist<T> implements zSelectSublist<T> with builder;

/*
zSelectSublist ::= derived_column | qualified_asterisk
derived_column ::= value_expression [ as_clause ]
as_clause ::= [ AS ] column_name
column_name ::= identifier

qualified asterisk not used, so we may skip derived_column
inline as_clause, column_name. We may choose to use or not to use AS. Adding it to GenericSqlFactory,
may override in dialects.
*/

<T> zSelectSublist<T> ::= value_expression<T> AS Identifier
{
    public void z$prepare$zSelectSublist(SqlContext context) {
    arg0.z$prepare$value_expression(context);
    }

    public Query<T> _GET_SQL_(SqlContext context) {
        DataExtractor<T> extractor = new DataExtractor<T>() {
            public T extract(final Row row) throws SQLException {
                return value(row.getValue(arg1.toString()));
            }
        };
        return new CompoundQuery<T>(extractor,
            new CompositeSql(arg0.z$create$value_expression(context), SqlTerminal.AS, arg1));
    }
}

|  value_expression<T>
{
public Query<T> _GET_SQL_(SqlContext context) {
    final ColumnNameProvider columnNameProvider = context.get(ColumnNameProvider.class);
        Identifier identifier = columnNameProvider.getUniqueName();
        if (identifier!=null) {
            return zSelectSublist_is_value_expression_AS_Identifier(arg0,
            identifier).z$create$zSelectSublist(context);
        } else {
            return new CompoundQuery<T>(new NullDataExtractor<T>(), arg0.z$create$value_expression(context));
        }
    }
}
    ( SelectSublist<T> ::= Value<T> )
;


#################  stopped here


interface value_expression<T> extends Scalar<T> ; // not Query<T>!


// A single class Value implements both zSelectSublist and value_expressin

class Value<T> implements value_expression<T> with valueExpression ;

/*************

value_expression ::=
		common_value_expression
	|	boolean_value_expression
	|	row_value_expression
etc.

Simqle syntax is quite different. We do not separate value expression types.
row_value_expression is not value_expression. Instead of
zSelectList ::= zSelectSublist ::= row_value_expression
we have RowValue<T> extends row_value_expression<T> directly - TODO
all common_value_expression are alike, we do not distinct them.
Both common_value_expression
*/

<T> value_expression<T> ::=
		common_value_expression<T>
		( Value<T> ::= CommonValueExpression<T> )

	|	boolean_value_expression<T>
	    ( Value<T> ::= BooleanValueExpression<T> )
;

interface common_value_expression<T> extends Scalar<T> ;
class CommonValueExpression<T> implements common_value_expression<T> with sqlBuilder;


/*
 Most instances will be <Boolean>, but SQL allows any valid primary_value_expression
 and database boolean value may be mapped to another type in Java
 */
interface boolean_value_expression<T> extends Scalar<T> ;
class BooleanValueExpression<T> implements boolean_value_expression<T> with sqlBuilder;


<T> common_value_expression<T> ::=  LEFT_PAREN value_expression<T> RIGHT_PAREN
    ( CommonValueExpression<T> ::= Value<T> )
    | value_expression_primary<T>
    ( CommonValueExpression<T> ::= ValueExpressionPrimary<T> )
;


/*
For boolean_value_expression syntax is very close to sql-2003
But not type paremeters: all methods do not have
type parametes, return type is <Boolean> and arguments are <?>
*/


<T> boolean_value_expression<T> ::= boolean_term<T>
		    ( BooleanValueExpression<T> ::= BooleanTerm<T> )
;
boolean_value_expression<Boolean> ::=	boolean_value_expression<?> OR boolean_term<?>
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
		( + BooleanValueExpression ) {
		    public BooleanValueExpression<Boolean> or(boolean_term<?> term) {
		        return new BooleanValueExpression<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, term));
		    }
		}
;

interface boolean_term<T> extends Scalar<T> ;
class BooleanTerm<T> implements boolean_term<T> with sqlBuilder ;


<T> boolean_term<T> ::= boolean_factor<T>
    ( BooleanTerm<T> ::= BooleanFactor<T> )
;
boolean_term<Boolean> ::= boolean_term<?> AND boolean_factor<?>
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
	( + BooleanTerm<T> ) {
	    public BooleanTerm<Boolean> and(BooleanFactor<?> factor) {
		        return new BooleanTerm<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, factor));
	    }
	}
;

interface boolean_factor<T> extends Scalar<T> ;
class BooleanFactor<T> implements boolean_factor<T> with sqlBuilder ;


<T> boolean_factor<T> ::= boolean_test<T>
    ( BooleanFactor<T> ::= BooleanTest<T> )

  | NOT boolean_test<T>
    ( + BooleanTest<T> )
    {
        BooleanFactor<T> negate() {
            return new BooleanFactor<T>(SqlFactory.getInstance()._THIS_PRODUCTION_(this));
        }
    }
;

interface boolean_test<T> extends Scalar<T> ;
class BooleanTest<T> implements boolean_test<T> with sqlBuilder ;

<T> boolean_test<T> ::= boolean_primary<T>
    ( BooleanTest<T> ::= BooleanPrimary<T> )
;

interface boolean_primary<T> extends Scalar<T> ;
class BooleanPrimary<T> implements boolean_primary<T> with sqlBuilder ;



boolean_test<Boolean> ::= boolean_primary<?>  IS  NOT  TRUE
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
    ( + BooleanPrimary<T> )
    {
        public BooleanTest<Boolean> isNotTrue() {
            return new BooleanTest<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this));
        }
    }

|  boolean_primary<?>  IS  TRUE
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
    ( + BooleanPrimary<T> )
    {
        public BooleanTest<Boolean> isTrue() {
            return new BooleanTest<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this));
        }
    }

| boolean_primary<?>  IS  NOT  FALSE
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
    ( + BooleanPrimary<T> )
    {
        public BooleanTest<Boolean> isNotFalse() {
            return new BooleanTest<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this));
        }
    }

|  boolean_primary<?>  IS  FALSE
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
    ( + BooleanPrimary<T> )
    {
        public BooleanTest<Boolean> isFalse() {
            return new BooleanTest<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this));
        }
    }

| boolean_primary<?>  IS  NOT  UNKNOWN
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
    ( + BooleanPrimary<T> )
    {
        public BooleanTest<Boolean> isNotUnknown() {
            return new BooleanTest<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this));
        }
    }

|  boolean_primary<?>  IS  UNKNOWN
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
    ( + BooleanPrimary<T> )
    {
        public BooleanTest<Boolean> isUnknown() {
            return new BooleanTest<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this));
        }
    }
;

/*
truth_value ::= TRUE | FALSE | UNKNOWN
*/


/*
boolean_primary ::= predicate | boolean_predicand

boolean_predicand ::=
		parenthesized_boolean_value_expression
	|	value_expression_primary

parenthesized_boolean_value_expression ::= left_paren boolean_value_expression right_paren

simplified by inlining
*/


<T> boolean_primary<T> ::= predicate<T>
    ( BooleanPrimary<T> ::= Predicate<T> )
  | LEFT_PAREN boolean_value_expression<T> RIGHT_PAREN
    ( BooleanPrimary<T> ::= BooleanValueExpression<T> )
  | value_expression_primary<T>
    ( BooleanPrimary<T> ::= ValueExpressionPrimary<T> )
;

interface predicate<T> extends Scalar<T> ;
class Predicate<T> implements predicate<T> with sqlBuilder;

/**
predicate ::=
		comparison_predicate
	|	between_predicate - full release
	|	in_predicate
	|	like_predicate - full release
	|	similar_predicate -- not supported by MySql; skipped
	|	null_predicate
	|	quantified_comparison_predicate - full release
	|	exists_predicate
	|	unique_predicate - full release
	|	normalized_predicate - not supported
	|	match_predicate - full release
	|	overlaps_predicate- not supported
	|	distinct_predicate- not supported
	|	member_predicate- not supported
	|	submultiset_predicate- not supported
	|	set_predicate- not supported
	|	type_predicate- not supported
*/

<T> predicate<T> ::=
		comparison_predicate<T>
		( Predicate<T> ::= ComparisonPredicate<T> )
	|	in_predicate<T>
		( Predicate<T> ::= InPredicate<T> )
	|	null_predicate<T>
		( Predicate<T> ::= NullPredicate<T> )
	|	exists_predicate<T>
		( Predicate<T> ::= ExistsPredicate<T> )
;

interface comparison_predicate<T> extends Scalar<T> ;
interface in_predicate<T> extends Scalar<T> ;
interface null_predicate<T> extends Scalar<T> ;
interface exists_predicate<T> extends Scalar<T> ;

class ComparisonPredicate<T> implements comparison_predicate<T> with SqlBuilder;
class InPredicate<T> implements in_predicate<T> with SqlBuilder;
class NullPredicate<T> implements null_predicate<T> with SqlBuilder;
class ExistsPredicate<T> implements exists_predicate<T> with SqlBuilder;


/*
comparison_predicate ::= row_value_predicand comparison_predicate_part_2

comparison_predicate_part_2 ::= comp_op row_value_predicand

comp_op ::=
		equals_operator
	|	not_equals_operator
	|	less_than_operator
	|	greater_than_operator
	|	less_than_or_equals_operator
	|	greater_than_or_equals_operator

*/

comparison_predicate<Boolean> ::=
    row_value_predicand<?> EQ row_value_predicand<?>
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
        ( + RowValuePredicand<T> )
        {
		    public ComparisonPredicate<Boolean> equal(row_value_predicand<?> other) {
		        return new ComparisonPredicate<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, other));
		    }
        }
  | row_value_predicand<?> NE row_value_predicand<?>
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
        ( + RowValuePredicand<T> )
        {
		    public ComparisonPredicate<Boolean> notEqual(row_value_predicand<?> other) {
		        return new ComparisonPredicate<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, other));
		    }
        }
  | row_value_predicand<?> LT row_value_predicand<?>
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
        ( + RowValuePredicand<T> )
        {
		    public ComparisonPredicate<Boolean> less(row_value_predicand<?> other) {
		        return new ComparisonPredicate<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, other));
		    }
        }
  | row_value_predicand<?> GT row_value_predicand<?>
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
        ( + RowValuePredicand<T> )
        {
		    public ComparisonPredicate<Boolean> greater(row_value_predicand<?> other) {
		        return new ComparisonPredicate<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, other));
		    }
        }
  | row_value_predicand<?> LE row_value_predicand<?>
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
        ( + RowValuePredicand<T> )
        {
		    public ComparisonPredicate<Boolean> lessOrEqual(row_value_predicand<?> other) {
		        return new ComparisonPredicate<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, other));
		    }
        }
  | row_value_predicand<?> GE row_value_predicand<?>
		{
            public Boolean value(Element element) throws SQLException {
             return BOOLEAN_SCALAR.value(element);
            }
		}
        ( + RowValuePredicand<T> )
        {
		    public ComparisonPredicate<Boolean> greaterOrEqual(row_value_predicand<?> other) {
		        return new ComparisonPredicate<Boolean>(SqlFactory.getInstance()._THIS_PRODUCTION_(this, other));
		    }
        }
;



interface row_value_predicand<T> ;
class RowValuePredicand<T> implements row_value_predicand with sqlBuilder ;

/*
row_value_predicand ::=
		row_value_special_case
	|	row_value_constructor_predicand

row_value_special_case ::= nonparenthesized_value_expression_primary

row_value_constructor_predicand ::=
		common_value_expression
	|	boolean_predicand
	|	explicit_row_value_constructor

Removed unnecessary mediators
common_value_expression<T> includes value_expression_primary<T>, so "special_case" is covered by it
*/
<T> row_value_predicand<T> ::= common_value_expression<T>
    ( RowValuePredicand<T> ::= CommonValueExpression<T> )

    | LEFT_PAREN boolean_value_expression<T> RIGHT_PAREN
        ( RowValuePredicand<T> ::= BooleanValueExpression<T> )

	|	explicit_row_value_constructor<T>
	    ( RowValuePredicand<T> ::= ExplicitRowValueConstructor<T> )
;


/********** TODO **********/

/*
row_value_expression ::=
		row_value_special_case
	|	explicit_row_value_constructor

row_value_special_case ::= nonparenthesized_value_expression_primary

explicit_row_value_constructor ::=
		left_paren row_value_constructor_element comma row_value_constructor_element_list right_paren
	|	ROW left_paren row_value_constructor_element_list right_paren
	|	row_subquery

row_value_constructor_element_list ::=
		row_value_constructor_element [ { comma row_value_constructor_element }... ]

row_value_constructor_element ::= value_expression

row_subquery ::= subquery

Changes:
1. inline row_value_special_case, row_value_constructor_element, row_subquery
2. change right recursion to left explicit_row_value_constructor
3. Allow row_value_constructor_element to be row_value_constructor_element_list
   and allow both members to be row
We have 2 possibilites for construction of row_value_expression from value_expression: as special case and with
ROW. Choosing the first one; the second not needed.

*/

interface row_value_expression<T> ;

<T> row_value_expression<T> ::= value_expression<T>
    |  explicit_row_value_constructor<T> ;

<T,U> explicit_row_value_constructor<Pair<T,U>> ::=
		LEFT_PAREN row_value_constructor_element_list<T> COMMA row_value_constructor_element_list<U> RIGHT_PAREN
// this is used by Values.pairOf(...) method

	|	subquery<T>

;

interface row_value_constructor_element_list<T> ;
class RowValueConstructorElementList<T> implements row_value_constructor_element_list<T> with sqlBuilder;

<T> row_value_constructor_element_list<T> ::= value_expression<T>
    ( RowValueConstructorElementList<T> ::= Value<T> )

  |  explicit_row_value_constructor<T>
        (  RowValueConstructorElementList<T> ::= ExplicitRowValueConstructor<T> )
;

interface explicit_row_value_constructor<T> ;
class ExplicitRowValueConstructor<T> implements explicit_row_value_constructor<T> with sqlBuilder;


interface value_expression_primary<T> extends Scalar<T> ;
class ValueExpressionPrimary<T> implements value_expression_primary<T>  with sqlBuilder;

/**************************** TODO *********************/

/*
nonparenthesized_value_expression_primary ::=
		unsigned_value_specification
	|	column_reference
	|	set_function_specification
	|	window_function
	|	scalar_subquery
	|	case_expression
	|	cast_specification
	|	field_reference
	|	subtype_treatment
	|	method_invocation
	|	static_method_invocation
	|	new_specification
	|	attribute_or_method_reference
	|	reference_resolution
	|	collection_value_constructor
	|	array_element_reference
	|	multiset_element_reference
	|	routine_invocation
	|	next_value_expression

*/


<T> value_expression_primary<T> ::=
		dynamic_parameter_specification<T>
	|	column_reference<T>
	    (ValueExpressionPrimary<T> ::= Column<T> )
	|	scalar_subquery<T>
	    ( ValueExpressionPrimary<T> ::= ScalarSubquery<T> )
	|	routine_invocation<T>
	|	next_value_expression<T>
;

// TODO abstract classes!

interface	dynamic_parameter_specification<T> extends Scalar<T> ;
abstract class DynamicParameter<T> implements dynamic_parameter_specification<T> with sqlBuilder;
interface	column_reference<T> extends Scalar<T> ;
abstract class Column<T> implements column_reference<T>
{
    private final Identifier name;
    private final Table owner;

    protected Column(String name, Table owner) {
        this.name = new Identifier(name);
        this.owner = owner;
    }

    public void z$prepare$column_reference(SqlContext context) {
        owner.z$prepare$zTableReference(context);
    }

    /**
     * Defines Sql produced by this syntactic element.
     * Implementations should produce Sql conforming to the productions specified above.
     *
     * @param context - construction context: dialect, tables available in this and enclosing contexts etc.
     * @return sql as required for column_reference syntax
     */
    public Sql z$create$column_reference(SqlContext context) {
        final FromClause fromClause = context.get(FromClause.class);
        final Identifier tableCorrelationName = fromClause.getCorrelationName(owner);
        return new CompositeSql(tableCorrelationName, SqlTerminal.PERIOD, name);
    }
}
;
interface	scalar_subquery<T> extends Scalar<T> ;
class ScalarSubquery<T> implements scalar_subquery<T> with sqlBuilder;
interface	routine_invocation<T>  extends Scalar<T> ;
class RoutineInvocation<T> implements routine_invocation<T> with sqlBuilder;
interface	next_value_expression<T>  extends Scalar<T> ;
class NextValueExpression<T> implements next_value_expression<T> with sqlBuilder;


<T> scalar_subquery<T> ::= LEFT_PAREN zQueryExpressionScalar<T> RIGHT_PAREN
{
    public Sql z$create$scalar_subquery(SqlContext context) {
        SqlContext innerContext = new SqlContext();
        innerContext.set(ColumnNameProvider.class, new NullColumnNameProvider());
        innerContext.set(SqlFactory.class, context.get(SqlFactory.class));
        // create an empty FromClase for zQueryExpressionScalar with current FromClause as enclosing
        innerContext.set(FromClause.class, new FromClause(context.get(FromClause.class)));
        arg0.z$prepare$zQueryExpressionScalar(innerContext);
        final Query<T> base = arg0.z$create$zQueryExpressionScalar(innerContext);
        return new CompoundQuery(base, new CompositeSql(LEFT_PAREN, base, RIGHT_PAREN));
    }

    public void z$prepare$scalar_subquery(SqlContext context) {
        // do nothing
    }
}
    ( ScalarSubquery<T> ::= QueryExpressionScalar<T> )
;

interface subquery<T> ;
class Subquery<T> implements subquery<T> with sqlBuilder ;

interface where_clause ;

interface zFromClause ;

/*
zFromClause ::= FROM zTableReference_list
zTableReference_list ::= zTableReference [ { comma zTableReference }... ]
zTableReference ::= table_primary_or_joined_table [ sample_clause ]
table_primary_or_joined_table ::= table_primary | joined_table

table_primary ::=
		table_or_query_name [ [ AS ] correlation_name [ left_paren derived_column_list right_paren ] ]
	|	derived_table [ AS ] correlation_name [ left_paren derived_column_list right_paren ]
	|	lateral_derived_table [ AS ] correlation_name [ left_paren derived_column_list right_paren ]
	|	collection_derived_table [ AS ] correlation_name [ left_paren derived_column_list right_paren ]
	|	table_function_derived_table [ AS ] correlation_name [ left_paren derived_column_list right_paren ]
	|	only_spec [ [ AS ] correlation_name [ left_paren derived_column_list right_paren ] ]
	|	left_paren joined_table right_paren

joined_table ::=
		cross_join
	|	qualified_join
	|	natural_join
	|	union_join

cross_join ::= zTableReference CROSS JOIN table_primary

qualified_join ::= zTableReference [ join_type ] JOIN zTableReference join_specification

natural_join ::= zTableReference NATURAL [ join_type ] JOIN table_primary

union_join ::= zTableReference UNION JOIN table_primary

*** Changes:
1. implicitt cross joins are not supported, so zTableReference_list can be only zTableReference
2. table_or_query_name is the only supported variant of table_primary
3. qualified_join is re-formulated to contain only table_brinary after join type
4. natural joins are not supported (not needed)
5. union joins are not supported (mostly not supported by popular RDBMS)
6. Sample_clause not supported
7. projections (derived_column_list) not supported
8. table_or_query_name [ [ AS ] correlation_name - both are just Identifier, AS omitted

*/

zFromClause ::= FROM  zTableReference ;
interface zTableReference ;

zTableReference ::=  table_primary
    ( TableReference ::= Table )
     | joined_table
     ( TableReference ::= JoinedTable )
;

class TableReference implements zTableReference with builder ;

interface table_primary ;
interface joined_table;

class FromClause implements zFromClause
import java.util.*;
import org.simqle.util.TSort;


{

    private final Map<Table, Identifier> localTables = new HashMap<Table, Identifier>();

    private final FromClause enclosingClause;
    private final NameGenerator nameGenerator;

    private int tableCounter = 0;
    private final String correlationNameFormat = "T%d";

    public Identifier getCorrelationName(Table table) {
        if (localTables.containsKey(table)) {
            Identifier name = localTables.get(table);
            if (name==null) {
                name = nameGenerator.generate();
                localTables.put(table, name);
            }
            return name;
        } else if (enclosingClause!=null) {
            return enclosingClause.getCorrelationName(table);
        } else {
            throw new IllegalStateException("Table "+table+" has not been registered in FromClause");
        }
    }

    public FromClause(final FromClause enclosingClause) {
        this.enclosingClause = enclosingClause;
        this.nameGenerator = enclosingClause !=null ? enclosingClause.nameGenerator : new NameGenerator();
    }

    public FromClause() {
        this(null);
     }

    public void z$prepare$zFromClause(SqlContext context) {
        throw new RuntimeException("This code should not be reachable");
    }

    public boolean addTable(Table table) {
        if (!isAvailable(table)) {
            localTables.put(table, null);
            return true;
        } else {
            return false;
        }
    }

    public Sql z$create$zFromClause(final SqlContext context) {
        TSort<Table> tSort = new TSort<Table>();
        // TODO some RDBMS allow emtry FromClause
        if (localTables.size()==0) {
            throw new IllegalStateException("No referenced tables");
        }
        for (Table table: localTables.keySet()) {
            tSort.add(table);

            SqlContext probeContext = new SqlContext();
            probeContext.set(FromClause.class, new FromClause());
            probeContext.set(SqlFactory.class, context.get(SqlFactory.class));
            table.z$prepare$zTableReference(probeContext);
            final Set<Table> dependencies = new HashSet<Table>(
                    probeContext.get(FromClause.class).localTables.keySet()
                    );
            // remove self-dependency
            dependencies.remove(table);
            for (Table dependency: dependencies) {
                tSort.add(table, dependency);
            }
        }
        // TODO better diagnostics on IllegalSTateException
        // cyclic dependency
        final List<Table> sortedTables = tSort.sort();
        zTableReference tableReference = sortedTables.get(0);
        for (int i = 1; i< sortedTables.size(); i++) {
            final Table t = sortedTables.get(i);
            tableReference = t.makeJoinedTable(tableReference);
        }
        // TODO take SqlFactory from the context
        return SqlFactory.getInstance().zFromClause_is_FROM_zTableReference(tableReference).z$create$zFromClause(context);
    }

    private boolean isAvailable(Table table) {
        if (enclosingClause!=null && enclosingClause.isAvailable(table)) {
            return true;
        } else {
            return localTables.containsKey(table);
        }
    }

    private static class NameGenerator {
        private int counter=0;

        private Identifier generate() {
            return new Identifier("T"+(counter++));
        }
    }

}
;

class Table implements table_primary {
    private final Identifier tableOrQueryName;
    public Table(String name) {
        tableOrQueryName = new Identifier(name);
    }
    private enum JoinType {
        cross,
        inner,
        outer,
        left,
        right
    }
    private join_specification joinSpecification = null;
    private JoinType joinType = null;

    private void setJoinType(JoinType joinType) {
        if (this.joinType!=null) {
            throw new IllegalStateException("Already joined");
        }
        this.joinType = joinType;
    }
    public void joinCross() {
        setJoinType(joinType.cross);
    }
    public void joinLeft(join_specification joinSpecification) {
        setJoinType(joinType.left);
        this.joinSpecification = joinSpecification;
    }


    public Sql z$create$table_primary(final SqlContext context) {
        final FromClause fromClause = context.get(FromClause.class);
        final Identifier correlationName = fromClause.getCorrelationName(this);
        return new CompositeSql(tableOrQueryName, correlationName);
    }

    protected JoinedTable makeJoinedTable(zTableReference tableReference) {
        if (joinType==null) {
            throw new IllegalStateException("No join defined for this table"+tableOrQueryName);
        }
        final joined_table.Builder joinedTableBuilder;
        switch (joinType) {
            case cross:
                joinedTableBuilder = SqlFactory.getInstance().joined_table_is_zTableReference_CROSS_JOIN_table_primary(tableReference, this);
                break;
            case left:
                joinedTableBuilder = SqlFactory.getInstance()
                .joined_table_is_zTableReference_LEFT_OUTER_JOIN_table_primary_join_specification(tableReference, this, joinSpecification);
                break;
            default:
                throw new IllegalStateException("Unexpected join type "+joinType);
        }
        return new JoinedTable(joinedTableBuilder);
    }

    public void z$prepare$table_primary(SqlContext context) {
        final FromClause fromClause = context.get(FromClause.class);
        if (fromClause.addTable(this) && joinSpecification!=null) {
            joinSpecification.z$prepare$join_specification(context);
        }
    }
}
;

table_primary ::= Identifier AS Identifier ;

/*
see Table.join(zTableReference)
*/
joined_table ::=
      zTableReference CROSS JOIN table_primary
|     zTableReference INNER JOIN table_primary join_specification
|     zTableReference OUTER JOIN table_primary join_specification
|     zTableReference LEFT OUTER JOIN table_primary join_specification
|     zTableReference RIGHT OUTER JOIN table_primary join_specification ;


class JoinedTable implements joined_table with builder;

interface join_specification;

/*
join_specification ::= join_condition | named_columns_join
join_condition ::= ON search_condition

We do not support named_columns_join
*/

join_specification ::= ON search_condition
    ( JoinSpecification ::= SearchCondition )
;

class JoinSpecification implements join_specification with builder;

interface search_condition ;

class SearchCondition implements search_condition with builder;

search_condition ::= boolean_value_expression
    ( SearchCondition ::= BooleanValueExpression )
;

class WhereClause implements where_clause with builder;

where_clause ::= WHERE search_condition
        ( WhereClause ::= SearchCondition )
;



interface order_by_clause ;

// no class OrderByClause!

