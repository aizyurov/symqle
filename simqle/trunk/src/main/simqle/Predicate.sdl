public interface predicate extends Scalar<Boolean> :Sql
{}

public class Predicate implements predicate with sqlBuilder
{}

predicate ::=
		p:comparison_predicate
		:: ComparisonPredicate mimics Predicate
		{}
	|	p:in_predicate
		:: InPredicate mimics Predicate
		{}
	|	p:null_predicate
		:: NullPredicate mimics Predicate
		{}
#	|	p:exists_predicate
#		ExistsPredicate mimics Predicate
;

public interface comparison_predicate extends Scalar<Boolean> : Sql
 {}


public class ComparisonPredicate implements comparison_predicate with SqlBuilder
{}

public class GenericComparisonPredicate extends BooleanScalar implements comparison_predicate
{
    private final Sql op;
    private final row_value_predicand<?> p1;
    private final row_value_predicand<?> p2;


    public GenericComparisonPredicate$(final Sql op, final row_value_predicand<?> p1, final row_value_predicand<?> p2) {
        this.op = op;
        this.p1 = p1;
        this.p2 = p2;
    }

    @Override
    public Sql z$create$comparison_predicate(final SqlContext context) {
        return new CompositeSql(p1.z$create$row_value_predicand(context), op, p2.z$create$row_value_predicand(context));
    }

    @Override
    public void z$prepare$comparison_predicate(final SqlContext context) {
        p1.z$prepare$row_value_predicand(context);
        p2.z$prepare$row_value_predicand(context);
    }

}


<T> comparison_predicate ::=
    p1:row_value_predicand<T> EQ p2:row_value_predicand<T>
		{
		    return new GenericComparisonPredicate(EQ, p1, p2);
		}
        :: RowValuePredicand<T>
        {
		    public ComparisonPredicate eq(row_value_predicand<T> other) {
		        return new ComparisonPredicate(_APPLY_RULE_(this, other));
		    }
        }
|
    p1:row_value_predicand<T> NE p2:row_value_predicand<T>
		{
		    return new GenericComparisonPredicate(NE, p1, p2);
		}
        :: RowValuePredicand<T>
        {
		    public ComparisonPredicate ne(row_value_predicand<T> other) {
		        return new ComparisonPredicate(_APPLY_RULE_(this, other));
		    }
        }
|
    p1:row_value_predicand<T> GT p2:row_value_predicand<T>
		{
		    return new GenericComparisonPredicate(GT, p1, p2);
		}
        :: RowValuePredicand<T>
        {
		    public ComparisonPredicate gt(row_value_predicand<T> other) {
		        return new ComparisonPredicate(_APPLY_RULE_(this, other));
		    }
        }
|
    p1:row_value_predicand<T> LT p2:row_value_predicand<T>
		{
		    return new GenericComparisonPredicate(LT, p1, p2);
		}
        :: RowValuePredicand<T>
        {
		    public ComparisonPredicate lt(row_value_predicand<T> other) {
		        return new ComparisonPredicate(_APPLY_RULE_(this, other));
		    }
        }
|
    p1:row_value_predicand<T> GE p2:row_value_predicand<T>
		{
		    return new GenericComparisonPredicate(GE, p1, p2);
		}
        :: RowValuePredicand<T>
        {
		    public ComparisonPredicate ge(row_value_predicand<T> other) {
		        return new ComparisonPredicate(_APPLY_RULE_(this, other));
		    }
        }
|
    p1:row_value_predicand<T> LE p2:row_value_predicand<T>
		{
		    return new GenericComparisonPredicate(LE, p1, p2);
		}
        :: RowValuePredicand<T>
        {
		    public ComparisonPredicate le(row_value_predicand<T> other) {
		        return new ComparisonPredicate(_APPLY_RULE_(this, other));
		    }
        }
;


public interface in_predicate extends Scalar<Boolean> : Sql
{}

class InPredicate implements in_predicate with SqlBuilder
{}

/*
<in predicate> ::= <row value predicand> <in predicate part 2>

<in predicate part 2> ::= [ NOT ] IN <in predicate value>

<in predicate value> ::=
		<table subquery>
	|	<left paren> <in value list> <right paren>

<in value list> ::= <row value expression> [ { <comma> <row value expression> }... ]
*/

<T> in_predicate ::= p:row_value_predicand<T> IN v:in_predicate_value<T>
    {
        return new AbstractInPredicate(p, v) {
            @Override
            public Sql z$create$in_predicate(final SqlContext context) {
                return new CompositeSql(IN, p.z$create$row_value_predicand(context), v.z$create$in_predicate_value(context));
            }
        };
    }
    :: RowValuePredicand<T>
    {
        public InPredicate in(in_predicate_value<T> v) {
            return new InPredicate(_APPLY_RULE_(this, v));
        }
    }
|   p:row_value_predicand<T> NOT IN v:in_predicate_value<T>
    {
        return new AbstractInPredicate(p, v) {
            @Override
            public Sql z$create$in_predicate(final SqlContext context) {
                return new CompositeSql(NOT, IN, p.z$create$row_value_predicand(context), v.z$create$in_predicate_value(context));
            }
        };
    }
    :: RowValuePredicand<T>
    {
        public InPredicate notIn(in_predicate_value<T> v) {
            return new InPredicate(_APPLY_RULE_(this, v));
        }
    }
;

public interface in_predicate_value<T> : Sql
{}

public class InPredicateValue<T> implements in_predicate_value<T> with sqlBuilder
{}

<T> in_predicate_value<T> ::= sq:subquery<T>
    :: Subquery<T> mimics  InPredicateValue<T>
    {}
|
    LEFT_PAREN vl:in_value_list<T> RIGHT_PAREN
    :: InValueList<T> mimics InPredicateValue<T>
    {}
;

public interface in_value_list<T> : Sql
{}

public class InValueList<T> implements in_value_list<T> with sqlBuilder
{}

<T> in_value_list<T> ::= e:row_value_expression<T>
     :: RowValue<T> mimics InValueList<T>
    {}
;

<T, U> in_value_list<Pair<T, U>> ::= l:in_value_list<T> COMMA e:row_value_expression<U>
     {
         return new in_value_list<Pair<T, U>>() {
             @Override
             public Sql z$create$in_value_list(final SqlContext context) {
                 return new CompositeSql(l.z$create$in_value_list(context), COMMA, e.z$create$row_value_expression(context));
             }

             @Override
             public void z$prepare$in_value_list(final SqlContext context) {
                 l.z$prepare$in_value_list(context);
                 e.z$prepare$row_value_expression(context);
             }
         };
     }
;

public abstract class AbstractInPredicate extends BooleanScalar implements in_predicate
{
    private final row_value_predicand<?> p;
    private final in_predicate_value<?> v;


    public AbstractInPredicate$(row_value_predicand<?> p, final in_predicate_value<?> v) {
        this.p = p;
        this.v = v;
    }

    @Override
    public final void z$prepare$in_predicate(final SqlContext context) {
        p.z$prepare$row_value_predicand(context);
        v.z$prepare$in_predicate_value(context);
    }

}

public interface null_predicate extends Scalar<Boolean> : Sql
{}

class NullPredicate implements null_predicate with SqlBuilder
{}

/*
<null predicate> ::= <row value predicand> <null predicate part 2>

<null predicate part 2> ::= IS [ NOT ] NULL
*/

null_predicate ::= p:row_value_predicand<?> IS NULL
    {
        return new AbstractNullPredicate(p) {
            @Override
             public Sql z$create$null_predicate(final SqlContext context) {
                 return new CompositeSql(p.z$create$row_value_predicand(context), IS, NULL);
             }
        };
    }
    :: RowValuePredicand<T>
    {
        public NullPredicate isNull() {
            return new NullPredicate(_APPLY_RULE_(this));
        }
    }
|   p:row_value_predicand<?> IS NOT NULL
    {
        return new AbstractNullPredicate(p) {
             @Override
             public Sql z$create$null_predicate(final SqlContext context) {
                 return new CompositeSql(p.z$create$row_value_predicand(context), IS, NOT, NULL);
             }
        };
    }
    :: RowValuePredicand<T>
    {
        public NullPredicate isNotNull() {
            return new NullPredicate(_APPLY_RULE_(this));
        }
    }
;

public abstract class AbstractNullPredicate extends BooleanScalar implements null_predicate {
    private final row_value_predicand p;

    protected AbstractNullPredicate$(final row_value_predicand p) {
        this.p = p;
    }

    @Override
    public final void z$prepare$null_predicate(final SqlContext context) {
        p.z$prepare$row_value_predicand(context);
    }

}