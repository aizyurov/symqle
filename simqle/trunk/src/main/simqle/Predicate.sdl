public interface zPredicate extends Scalar<Boolean> :Sql
{}

public class Predicate implements zPredicate with sqlBuilder
{}

zPredicate ::=
		p:zComparisonPredicate
		:: ComparisonPredicate mimics Predicate
		{}
	|	p:zInPredicate
		:: InPredicate mimics Predicate
		{}
	|	p:zNullPredicate
		:: NullPredicate mimics Predicate
		{}
	|	p:zExistsPredicate
		:: ExistsPredicate mimics Predicate
		{}
;

public interface zComparisonPredicate extends Scalar<Boolean> : Sql
 {}


public class ComparisonPredicate implements zComparisonPredicate with SqlBuilder
{}

public class GenericComparisonPredicate extends AbstractPredicate implements zComparisonPredicate
{
    private final Sql op;
    private final zRowValuePredicand<?> p1;
    private final zRowValuePredicand<?> p2;


    public GenericComparisonPredicate$(final Sql op, final zRowValuePredicand<?> p1, final zRowValuePredicand<?> p2) {
        this.op = op;
        this.p1 = p1;
        this.p2 = p2;
    }

    @Override
    public Sql z$create$zComparisonPredicate(final SqlContext context) {
        return new CompositeSql(p1.z$create$zRowValuePredicand(context), op, p2.z$create$zRowValuePredicand(context));
    }

    @Override
    public void z$prepare$zComparisonPredicate(final SqlContext context) {
        p1.z$prepare$zRowValuePredicand(context);
        p2.z$prepare$zRowValuePredicand(context);
    }

}


<T> zComparisonPredicate ::=
    p1:zRowValuePredicand<T> EQ p2:zRowValuePredicand<T>
		{
		    return new GenericComparisonPredicate(EQ, p1, p2);
		}
        :: RowValuePredicand<T>
        {
		    public ComparisonPredicate eq(zRowValuePredicand<T> other) {
		        return new ComparisonPredicate(_APPLY_RULE_(this, other));
		    }
        }
|
    p1:zRowValuePredicand<T> NE p2:zRowValuePredicand<T>
		{
		    return new GenericComparisonPredicate(NE, p1, p2);
		}
        :: RowValuePredicand<T>
        {
		    public ComparisonPredicate ne(zRowValuePredicand<T> other) {
		        return new ComparisonPredicate(_APPLY_RULE_(this, other));
		    }
        }
|
    p1:zRowValuePredicand<T> GT p2:zRowValuePredicand<T>
		{
		    return new GenericComparisonPredicate(GT, p1, p2);
		}
        :: RowValuePredicand<T>
        {
		    public ComparisonPredicate gt(zRowValuePredicand<T> other) {
		        return new ComparisonPredicate(_APPLY_RULE_(this, other));
		    }
        }
|
    p1:zRowValuePredicand<T> LT p2:zRowValuePredicand<T>
		{
		    return new GenericComparisonPredicate(LT, p1, p2);
		}
        :: RowValuePredicand<T>
        {
		    public ComparisonPredicate lt(zRowValuePredicand<T> other) {
		        return new ComparisonPredicate(_APPLY_RULE_(this, other));
		    }
        }
|
    p1:zRowValuePredicand<T> GE p2:zRowValuePredicand<T>
		{
		    return new GenericComparisonPredicate(GE, p1, p2);
		}
        :: RowValuePredicand<T>
        {
		    public ComparisonPredicate ge(zRowValuePredicand<T> other) {
		        return new ComparisonPredicate(_APPLY_RULE_(this, other));
		    }
        }
|
    p1:zRowValuePredicand<T> LE p2:zRowValuePredicand<T>
		{
		    return new GenericComparisonPredicate(LE, p1, p2);
		}
        :: RowValuePredicand<T>
        {
		    public ComparisonPredicate le(zRowValuePredicand<T> other) {
		        return new ComparisonPredicate(_APPLY_RULE_(this, other));
		    }
        }
;


public interface zInPredicate extends Scalar<Boolean> : Sql
{}

class InPredicate implements zInPredicate with SqlBuilder
{}

/*
<in zPredicate> ::= <row value predicand> <in zPredicate part 2>

<in zPredicate part 2> ::= [ NOT ] IN <in zPredicate value>

<in zPredicate value> ::=
		<table subquery>
	|	<left paren> <in value list> <right paren>

<in value list> ::= <row value expression> [ { <comma> <row value expression> }... ]
*/

<T> zInPredicate ::= p:zRowValuePredicand<T> IN v:zInPredicate_value<T>
    {
        return new AbstractInPredicate(p, v) {
            @Override
            public Sql z$create$zInPredicate(final SqlContext context) {
                return new CompositeSql(IN, p.z$create$zRowValuePredicand(context), v.z$create$zInPredicate_value(context));
            }
        };
    }
    :: RowValuePredicand<T>
    {
        public InPredicate in(zInPredicate_value<T> v) {
            return new InPredicate(_APPLY_RULE_(this, v));
        }
    }
|   p:zRowValuePredicand<T> NOT IN v:zInPredicate_value<T>
    {
        return new AbstractInPredicate(p, v) {
            @Override
            public Sql z$create$zInPredicate(final SqlContext context) {
                return new CompositeSql(NOT, IN, p.z$create$zRowValuePredicand(context), v.z$create$zInPredicate_value(context));
            }
        };
    }
    :: RowValuePredicand<T>
    {
        public InPredicate notIn(zInPredicate_value<T> v) {
            return new InPredicate(_APPLY_RULE_(this, v));
        }
    }
;

public interface zInPredicate_value<T> : Sql
{}

public class InPredicateValue<T> implements zInPredicate_value<T> with sqlBuilder
{}

<T> zInPredicate_value<T> ::= sq:subquery<T>
    :: Subquery<T> mimics  InPredicateValue<T>
    {}
|
    LEFT_PAREN vl:zInValueList<T> RIGHT_PAREN
    :: InValueList<T> mimics InPredicateValue<T>
    {}
;

public interface zInValueList<T> : Sql
{}

public class InValueList<T> implements zInValueList<T> with sqlBuilder
{}

<T> zInValueList<T> ::= e:zRowValueExpression<T>
     :: RowValue<T> mimics InValueList<T>
    {}
;

<T> zInValueList<T> ::= e:zRowValueExpression<T> COMMA l:zInValueList<T>
    :: RowValue<T>
     {
        public InValueList orIn(final zInValueList l) {
            return new InValueList(_APPLY_RULE_(this, l));
        }
     }
;

public abstract class AbstractInPredicate extends AbstractPredicate implements zInPredicate
{
    private final zRowValuePredicand<?> p;
    private final zInPredicate_value<?> v;


    public AbstractInPredicate$(zRowValuePredicand<?> p, final zInPredicate_value<?> v) {
        this.p = p;
        this.v = v;
    }

    @Override
    public final void z$prepare$zInPredicate(final SqlContext context) {
        p.z$prepare$zRowValuePredicand(context);
        v.z$prepare$zInPredicate_value(context);
    }

}

public interface zNullPredicate extends Scalar<Boolean> : Sql
{}

class NullPredicate implements zNullPredicate with SqlBuilder
{}

/*
<null zPredicate> ::= <row value predicand> <null zPredicate part 2>

<null zPredicate part 2> ::= IS [ NOT ] NULL
*/

zNullPredicate ::= p:zRowValuePredicand<?> IS NULL
    {
        return new AbstractNullPredicate(p) {
            @Override
             public Sql z$create$zNullPredicate(final SqlContext context) {
                 return new CompositeSql(p.z$create$zRowValuePredicand(context), IS, NULL);
             }
        };
    }
    :: RowValuePredicand<T>
    {
        public NullPredicate isNull() {
            return new NullPredicate(_APPLY_RULE_(this));
        }
    }
|   p:zRowValuePredicand<?> IS NOT NULL
    {
        return new AbstractNullPredicate(p) {
             @Override
             public Sql z$create$zNullPredicate(final SqlContext context) {
                 return new CompositeSql(p.z$create$zRowValuePredicand(context), IS, NOT, NULL);
             }
        };
    }
    :: RowValuePredicand<T>
    {
        public NullPredicate isNotNull() {
            return new NullPredicate(_APPLY_RULE_(this));
        }
    }
;

public abstract class AbstractNullPredicate extends AbstractPredicate implements zNullPredicate {
    private final zRowValuePredicand p;

    protected AbstractNullPredicate$(final zRowValuePredicand p) {
        this.p = p;
    }

    @Override
    public final void z$prepare$zNullPredicate(final SqlContext context) {
        p.z$prepare$zRowValuePredicand(context);
    }

}

public interface zExistsPredicate extends Scalar<Boolean> : Sql
{}

public class ExistsPredicate implements zExistsPredicate with SqlBuilder
{}

zExistsPredicate ::= EXISTS sq:subquery<?>
    {
        return new AbstractExistsPredicate() {
             @Override
             public Sql z$create$zExistsPredicate(final SqlContext context) {
                 return new CompositeSql(EXISTS, sq.z$create$subquery(context));
             }
             @Override
             public void z$prepare$zExistsPredicate(final SqlContext context) {
                sq.z$prepare$subquery(context);
             }
        };

    }
    :: Subquery<T>
    {
        public ExistsPredicate exists() {
            return new ExistsPredicate(_APPLY_RULE_(this));
        }
    }
;

public abstract class AbstractPredicate implements Scalar<Boolean> {
    @Override
    public final Boolean value(final Element element) throws SQLException {
        return element.getBoolean();
    }
}

public abstract class AbstractExistsPredicate extends AbstractPredicate implements zExistsPredicate
{}