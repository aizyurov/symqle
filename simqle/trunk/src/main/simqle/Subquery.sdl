public interface	scalar_subquery<T> extends Scalar<T> : Sql
{}

public class ScalarSubquery<T> implements scalar_subquery<T> with sqlBuilder
{}

interface subquery<T> : Sql
{}

class Subquery<T> implements subquery<T> with sqlBuilder
{}


<T> scalar_subquery<T> ::= LEFT_PAREN qe:zQueryExpressionScalar<T> RIGHT_PAREN
{
    return new scalar_subquery<T>() {
        @Override
        public Sql z$create$scalar_subquery(SqlContext context) {
            SqlContext innerContext = new SqlContext();
            innerContext.set(ColumnNameProvider.class, new NullColumnNameProvider());
            innerContext.set(SqlFactory.class, context.get(SqlFactory.class));
            // create an empty FromClase for zQueryExpressionScalar with current FromClause as enclosing
            innerContext.set(FromClause.class, new FromClause(context.get(FromClause.class)));
            qe.z$prepare$zQueryExpressionScalar(innerContext);
            final Query<T> base = qe.z$create$zQueryExpressionScalar(innerContext);
            return new CompoundQuery(base, new CompositeSql(LEFT_PAREN, base, RIGHT_PAREN));
        }

            @Override
        public void z$prepare$scalar_subquery(SqlContext context) {
            // do nothing
        }

            @Override
        public T value(final Element element) throws SQLException {
            return qe.value(element);
        }
    };
}
    :: QueryExpressionScalar<T> mimics ScalarSubquery<T>
    {}
;

<T> subquery<T> ::= LEFT_PAREN qe:zQueryExpression<T> RIGHT_PAREN
{
    return new subquery<T>() {
            @Override
        public Sql z$create$subquery(SqlContext context) {
            SqlContext innerContext = new SqlContext();
            innerContext.set(ColumnNameProvider.class, new NullColumnNameProvider());
            innerContext.set(SqlFactory.class, context.get(SqlFactory.class));
            // create an empty FromClase for zQueryExpressionScalar with current FromClause as enclosing
            innerContext.set(FromClause.class, new FromClause(context.get(FromClause.class)));
            qe.z$prepare$zQueryExpression(innerContext);
            final Query<T> base = qe.z$create$zQueryExpression(innerContext);
            return new CompoundQuery(base, new CompositeSql(LEFT_PAREN, base, RIGHT_PAREN));
        }

            @Override
        public void z$prepare$subquery(SqlContext context) {
            // do nothing
        }
    };

}
    :: QueryExpression<T> mimics Subquery<T>
    {}
;

