(done another way: method map() for expressions) public ValueExpression<T> add(ValueExpression<?>, Term<?>, Mapper<T>);
mult, div, sum
Same for concat

(done) Rename plus -> add, minus -> sub

(discarded) Add access to DialectDataSource from Row (needed for collections) - no need, can pass DDS to Selector constructor

(done) Refactor DialectDataSource -> DatabaseGate - transaction suport! is DataSource enough?
Remove list(DataSource,...) ?

(done) Remove setIgnoreType: methods with Mapper will do

(done) casts

(done) contains() for subquery

(done) refactor Pair - rename all methods and variables

(done) LIMIT/OFFSET

(done) add ORDER BY for union/except/intersect (without parameter, there is only one column accessible via Context)

(done) fix orderAsc/orderDesc: remove literal "S0"

(done) map() for WhenClause*; rename methods (orWhen -> option ; orElse => otherwise)

(discard: can just useList<SetClause>) public SetList.append() to reuse the same code for insert and update

(done) collate clause

(done) Symqle methods visibility. Package scope and public methods of Symqle become public in abstract classes. Protected methods make no sense - to be removed.

(done) rename booleanValue -> asPredicate

(done) ImplicitFromClause should be provided by the gate. Each subclass can specify what to do when context does not contain any table. For example, add new TableOrView("dual") or new TableOrView("(values (1))") to the context and continue, or just return ImplicitFromClause and wait for call to z$FromClauseFromNothing.
ImplicitFromClause should provide a hook for adding table (other logic is final!). Also, provide configurable allowNoTables and allowImplicitCrossJoins. If allowNoTables is false and there are no tables, an exception is thrown immediately. 

http://kobyleha.com/en/programming/java/how_to_build_skin_for_maven_2_site_plugin

(postpone) sequences

(done) return generated keys

(done) inner/right/outer joins

(done) getSqlText() -> sql()

(done) replace IllegalStateException/IllegalArgumentException -> BadStatementException

(done) databaseGate: executeQuery, executeUpdate, execute(ConnectionCallback) + BatchingGate: submitUpdate, flush.
(done) move normalization of SQL to Dialect (may be different for different dialects). Remove NiceSql.

(done) make SqlContext immutable. Separate logic  of TableRegistry and FROM clause generation. SingelTableRegistry and
NoTablesRegistry (check that a.insert(set(a.name=a.nick)).execute() is invalid). The last is optional, some DBs support insert into a (a,b) values (1, a) -add to Configuration

insertFrom: t.insert(t.rows(t.x.set(s.x), t.y.set(s.z).where(s.w.eq(0)))).execute()

(done) Labels, LabelRegistry (?) (for union/except/intersect and subqueries)

Rename Element -> Inbox, SqlParameter -> OutBox, move to symqle-client.

Generator: generate client (primary keys, DTO, FullDTO)

Generator: simple xml to override defaults (use JAXB)

(discarded) Compiler: push methods to interfaces; if there are conflicting interfaces, implement nearest only
impossible: e.g map(), which is in multiple interfaces, would block all but one.

(done) Core: refactor Select Statement

(done) Core: make Sql abstract class and enforce this.appendTo(builder); builder.toString().equals(this.toString());

Provide a separate class for database system variables. add current_user

compiler: redirect stderr to log

simplify insert/update: use SetClauseList directly and add explicit SetClauseList ::= AbstractSetClauseList COMMA SetClause :: SetClauseList also {}

(ot needed) simplify OrderBy: SortSpecificationList ::= ... :: AbstractSortSpecificationList then(? - conflict with when-then)

SelectStatement#countRows

ALL/ANY/SOME (future release)

