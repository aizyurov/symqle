public interface AggregateFunction<T> extends Scalar<T> : Sql {}

public class AbstractAggregateFunction<T> implements AggregateFunction<T> {}

# only <general set function>'s are supported so far.
# DISTINCT is supported where appropriate
# COUNT(*) not supported so far

AggregateFunction<Integer> ::=
    COUNT LEFT_PAREN ve:ValueExpression<?> RIGHT_PAREN ::
    /**
     * Creates {@code count(this)}.
     * The result can be used in queries and subqueries.
     * @return created AbstractAggregateFunction
     */
    public AbstractAggregateFunction<Integer> count {
        public Mapper<Integer> getMapper() {
            return CoreMappers.INTEGER;
        }
    }
|
    /**
     * Creates {@code count(distinct this)}.
     * The result can be used in queries and subqueries.
     * @return created AbstractAggregateFunction
     */
    COUNT LEFT_PAREN DISTINCT ve:ValueExpression<?> RIGHT_PAREN :: public AbstractAggregateFunction<Integer> countDistinct {
        public Mapper<Integer> getMapper() {
            return CoreMappers.INTEGER;
        }
    }
;

<T> AggregateFunction<T> ::=
    /**
     * Creates {@code min(this)}.
     * The result can be used in queries and subqueries.
     * @return created AbstractAggregateFunction with type parameter inherited from the argument.
     */
    MIN LEFT_PAREN ve:ValueExpression<T> RIGHT_PAREN :: public AbstractAggregateFunction<T> min
|
    /**
     * Creates {@code max(this)}.
     * The result can be used in queries and subqueries.
     * @return created AbstractAggregateFunction  with type parameter inherited from the argument.
     */
    MAX LEFT_PAREN ve:ValueExpression<T> RIGHT_PAREN :: public AbstractAggregateFunction<T> max
;

AggregateFunction<Number> ::=
    /**
     * Creates {@code sum(this)}.
     * The result can be used in queries and subqueries.
     * @return created AbstractAggregateFunction<Number>
     */
    SUM LEFT_PAREN ve:ValueExpression<?> RIGHT_PAREN :: public AbstractAggregateFunction<Number> sum {
        public Mapper<Number> getMapper() {
            return CoreMappers.NUMBER;
        }
    }
|
    /**
     * Creates {@code sum(this)}.
     * The result can be used in queries and subqueries.
     * @return created AbstractAggregateFunction<Number>
     */
    AVG LEFT_PAREN ve:ValueExpression<?> RIGHT_PAREN :: public AbstractAggregateFunction<Number> avg {
        public Mapper<Number> getMapper() {
            return CoreMappers.NUMBER;
        }
    }
;




