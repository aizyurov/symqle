public interface BooleanExpression : Sql {}

public class AbstractBooleanExpression implements BooleanExpression {}

# For BooleanValueExpression syntax is very close to sql-2003

BooleanExpression ::=
    bt:BooleanTerm :: implicit {}
|
    bve:BooleanExpression OR bvt:BooleanTerm
        :: public AbstractBooleanExpression or {}
;

public interface BooleanTerm : Sql {}

public class AbstractBooleanTerm implements BooleanTerm {}

BooleanTerm ::=
    bf:BooleanFactor :: implicit {}
|
    bt:BooleanTerm AND bf:BooleanFactor
        :: public AbstractBooleanTerm and {}
;

public interface BooleanFactor : Sql {}

public class AbstractBooleanFactor implements BooleanFactor {}

BooleanFactor ::=
    bt:BooleanTest :: implicit {}
|
    NOT bt:BooleanTest
        :: public AbstractBooleanFactor negate {}
;

public interface BooleanTest : Sql {}

public class AbstractBooleanTest implements BooleanTest {}

BooleanTest ::=
    bp:BooleanPrimary :: implicit {}
|
    bp:BooleanPrimary  IS  NOT  TRUE
        :: public AbstractBooleanTest isNotTrue {}
|
    bp:BooleanPrimary  IS  TRUE
        :: public AbstractBooleanTest isTrue {}
|
    bp:BooleanPrimary  IS  NOT  FALSE
        :: public AbstractBooleanTest isNotFalse {}
|
    bp:BooleanPrimary  IS  FALSE
        :: public AbstractBooleanTest isFalse {}
|
    bp:BooleanPrimary  IS  NOT  UNKNOWN
        :: public AbstractBooleanTest isNotUnknown {}
|
    bp:BooleanPrimary  IS  UNKNOWN
        :: public AbstractBooleanTest isUnknown {}
;

interface BooleanPrimary : Sql {}

public class AbstractBooleanPrimary implements BooleanPrimary {}

BooleanPrimary ::=
    p:Predicate :: implicit {}
|
    LEFT_PAREN bve:BooleanExpression RIGHT_PAREN :: implicit {}
|
    e:ValueExpressionPrimary<?>
        :: public AbstractBooleanPrimary asPredicate {}
;



