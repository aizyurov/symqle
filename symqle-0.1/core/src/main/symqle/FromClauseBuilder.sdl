
import org.symqle.common.CompositeSqlBuilder;
import org.symqle.common.MalformedStatementException;
import org.symqle.common.SqlBuilder;
import org.symqle.common.SqlContext;
import org.symqle.jdbc.Configuration;
import org.symqle.querybuilder.StringSqlBuilder;
import org.symqle.querybuilder.SqlTerm;
import org.symqle.querybuilder.TableNameGenerator;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
class FromClauseBuilder {
    /**
     * Builds a SqlBuilder of FromClause from local scope tables.
     * @param context
     * @return null if FROM CLAUSE is not applicable (no tables and supported by dialect and options)
     */
    SqlBuilder build(final SqlContext context) {
        SelectTableRegistry registry = (SelectTableRegistry) context.get(TableRegistry.class);
        final Configuration configuration = context.get(Configuration.class);
        final boolean allowNoFrom = configuration.allowNoFrom();
        final boolean allowImplicitCrossJoins = configuration.allowImplicitCrossJoins();
        final List<TableOrView> localTables = registry.getLocal();
        if (localTables.isEmpty()) {
            if (allowNoFrom) {
                return generateEmptyFromClause(context);
            } else {
                throw new MalformedStatementException("At least one table is required for FROM clause");
            }
        }
        final Set<TableOrView> roots = new HashSet<TableOrView>();
        for (TableOrView t : localTables) {
            roots.add(t.joinedTableRoot());
        }
        final Iterator<TableOrView> iterator = roots.iterator();
        TableReferenceList tableReferenceList = Symqle.createTableReferenceList(iterator.next());
        while (iterator.hasNext()) {
            if (!allowImplicitCrossJoins) {
                throw new MalformedStatementException("Implicit cross joins are not allowed, cross joined: " + roots);
            }
            tableReferenceList = Symqle.appendTableReferenceList(tableReferenceList, iterator.next());
        }
        return Symqle.createFrom(tableReferenceList).z$sqlOfFromClause(context);
    }


    private SqlBuilder generateEmptyFromClause(final SqlContext context) {
        final Dialect dialect = context.get(Dialect.class);
        final String fallbackTableName = dialect.fallbackTableName();
        if (fallbackTableName == null) {
            return null;
        } else {
            // need a unique correlation name for fallback table
            return new CompositeSqlBuilder(
              SqlTerm.FROM,
              new StringSqlBuilder(fallbackTableName),
              SqlTerm.AS,
              new StringSqlBuilder(context.get(TableNameGenerator.class).generate("DUMMY")));
        }
    }
}

