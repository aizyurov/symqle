
public interface QuerySpecification<T> : Query<T> {}
public class AbstractQuerySpecification<T> implements QuerySpecification<T> {}

public interface QuerySpecificationScalar<T> extends Scalar<T> : Query<T> {}
public class AbstractQuerySpecificationScalar<T> implements QuerySpecificationScalar<T> {}

<T> QuerySpecificationScalar<T> ::=
    qb:QueryBaseScalar<T> :: implicit {}
|
    qb:QueryBaseScalar<T> wc:WhereClause ::
         public AbstractQuerySpecificationScalar<T> where {}
;

<T> QuerySpecification<T> ::=
    qb:QueryBase<T> :: implicit {}
|
    qb:QueryBase<T> wc:WhereClause ::
         public AbstractQuerySpecification<T> where {}
;


# QueryBase and QueryBaseScalar

public interface QueryBase<T> : Query<T> {}

public class AbstractQueryBase<T> implements QueryBase<T> {}

# see SelectList.sdl, FromClause.sdl
# all methods derived from syntax are protected
# public methods do not include FromClause

public interface QueryBaseScalar<T> extends Scalar<T> :  Query<T> {}

public class AbstractQueryBaseScalar<T> implements QueryBaseScalar<T> {}

# see SelectList.sdl, FromClause.sdl

<T> QueryBaseScalar<T> ::=
    SELECT sl:AggregateSelectSublist<T> fc:FromClause :: private QueryBaseScalar<T> from {}
|
    SELECT sl:SelectSublist<T> fc:FromClause :: private QueryBaseScalar<T> from {}
|
    SELECT ALL sl:SelectSublist<T> fc:FromClause ::
         public AbstractQueryBaseScalar<T> selectAll {}
|
    SELECT DISTINCT sl:SelectSublist<T> fc:FromClause ::
         public AbstractQueryBaseScalar<T> distinct {}
;


:: <T> QueryBaseScalar<T> implicit(final AggregateSelectSublist<T> sl) {
    return from(sl, new ImplicitFromClause());
}

:: <T> QueryBaseScalar<T> implicit(final SelectSublist<T> sl) {
    return from(sl, new ImplicitFromClause());
}

# public methods for construction of AbstractQueryBaseScalar
:: public <T> AbstractQueryBaseScalar<T> selectAll(final SelectSublist<T> sl) {
    return selectAll(sl, new ImplicitFromClause());
}

:: public <T> AbstractQueryBaseScalar<T> distinct(final SelectSublist<T> sl) {
    return distinct(sl, new ImplicitFromClause());
}

<T> QueryBase<T> ::=
    SELECT sl:SelectList<T> fc:FromClause :: private QueryBase<T> from {}
|
    SELECT ALL sl:SelectList<T> fc:FromClause ::
         private AbstractQueryBase<T> selectAll {
         }
|
    SELECT DISTINCT sl:SelectList<T> fc:FromClause ::
         private AbstractQueryBase<T> distinct {
         }
;

# implicit conversion from SelectList

:: <T> QueryBase<T> implicit(final SelectList<T> sl) {
    return from(sl, new ImplicitFromClause());
}

# public methods for construction of AbstractQueryBase
:: public <T> AbstractQueryBase<T> selectAll(final SelectList<T> sl) {
    return selectAll(sl, new ImplicitFromClause());
}

:: public <T> AbstractQueryBase<T> distinct(final SelectList<T> sl) {
    return distinct(sl, new ImplicitFromClause());
}


