
public interface QuerySpecification<T> : Query<T> {}
public class AbstractQuerySpecification<T> implements QuerySpecification<T> {}

public interface QuerySpecificationScalar<T> extends Scalar<T> : Query<T> {}
public class AbstractQuerySpecificationScalar<T> implements QuerySpecificationScalar<T> {}

<T> QuerySpecificationScalar<T> ::=
    qb:QueryBaseScalar<T> :: implicit {}
|
    qb:QueryBaseScalar<T> wc:WhereClause ::
         public AbstractQuerySpecificationScalar<T> where {}
;

<T> QuerySpecification<T> ::=
    qb:QueryBase<T> :: implicit {}
|
    qb:QueryBase<T> wc:WhereClause ::
         public AbstractQuerySpecification<T> where {}
;


# QueryBase and QueryBaseScalar

public interface QueryBase<T> : Query<T> {}

public class AbstractQueryBase<T> implements QueryBase<T> {}

# see SelectList.sdl, FromClause.sdl
# all methods derived from syntax are protected
# public methods do not include FromClause

public interface QueryBaseScalar<T> extends Scalar<T> :  Query<T> {}

public class AbstractQueryBaseScalar<T> implements QueryBaseScalar<T> {}

# see SelectList.sdl, FromClause.sdl

<T> QueryBaseScalar<T> ::=
    SELECT sl:SelectListScalar<T>  :: implicit {
            public Query<T> z$sqlOfQueryBaseScalar(final SqlContext context) {
                final Query<T> query = sl.z$sqlOfSelectListScalar(context);
                final Sql fromClauseSql = new FromClauseBuilder().build(context);
                final Dialect dialect = context.get(Dialect.class);
                final Sql sql = fromClauseSql == null ?
                        dialect.QueryBaseScalar_is_SELECT_SelectListScalar(query) :
                        dialect.QueryBaseScalar_is_SELECT_SelectListScalar_FromClause(query, fromClauseSql);
                return new ComplexQuery<T>(query, sql);
            }
    }
|
    SELECT sl:SelectListScalar<T> fc:FromClause
|
    SELECT ALL sl:SelectListScalar<T>  :: AbstractQueryBaseScalar<T> selectAll  {
            public Query<T> z$sqlOfQueryBaseScalar(final SqlContext context) {
                final Query<T> query = sl.z$sqlOfSelectListScalar(context);
                final Sql fromClauseSql = new FromClauseBuilder().build(context);
                final Dialect dialect = context.get(Dialect.class);
                final Sql sql = fromClauseSql == null ?
                        dialect.QueryBaseScalar_is_SELECT_ALL_SelectListScalar(query) :
                        dialect.QueryBaseScalar_is_SELECT_ALL_SelectListScalar_FromClause(query, fromClauseSql);
                return new ComplexQuery<T>(query, sql);
            }
    }
|
    SELECT ALL sl:SelectListScalar<T> fc:FromClause
|
    SELECT DISTINCT sl:SelectListScalar<T>  :: AbstractQueryBaseScalar<T> distinct {
            public Query<T> z$sqlOfQueryBaseScalar(final SqlContext context) {
                final Query<T> query = sl.z$sqlOfSelectListScalar(context);
                final Sql fromClauseSql = new FromClauseBuilder().build(context);
                final Dialect dialect = context.get(Dialect.class);
                final Sql sql = fromClauseSql == null ?
                        dialect.QueryBaseScalar_is_SELECT_DISTINCT_SelectListScalar(query) :
                        dialect.QueryBaseScalar_is_SELECT_DISTINCT_SelectListScalar_FromClause(query, fromClauseSql);
                return new ComplexQuery<T>(query, sql);
            }
    }
|
    SELECT DISTINCT sl:SelectListScalar<T> fc:FromClause
;



<T> QueryBase<T> ::=
    SELECT sl:SelectList<T> :: implicit {
        public Query<T> z$sqlOfQueryBase(final SqlContext context) {
                final Query<T> query = sl.z$sqlOfSelectList(context);
                final Sql fromClauseSql = new FromClauseBuilder().build(context);
                final Dialect dialect = context.get(Dialect.class);
                final Sql sql = fromClauseSql == null ?
                        dialect.QueryBase_is_SELECT_SelectList(query) :
                        dialect.QueryBase_is_SELECT_SelectList_FromClause(query, fromClauseSql);
                return new ComplexQuery<T>(query, sql);
        }
    }
|
    SELECT sl:SelectList<T> fc:FromClause
|
    SELECT ALL sl:SelectList<T> :: public AbstractQueryBase<T> selectAll {
        public Query<T> z$sqlOfQueryBase(final SqlContext context) {
                final Query<T> query = sl.z$sqlOfSelectList(context);
                final Sql fromClauseSql = new FromClauseBuilder().build(context);
                final Dialect dialect = context.get(Dialect.class);
                final Sql sql = fromClauseSql == null ?
                        dialect.QueryBase_is_SELECT_ALL_SelectList(query) :
                        dialect.QueryBase_is_SELECT_ALL_SelectList_FromClause(query, fromClauseSql);
                return new ComplexQuery<T>(query, sql);
        }
    }
|
    SELECT ALL sl:SelectList<T> fc:FromClause
|
    SELECT DISTINCT sl:SelectList<T> :: AbstractQueryBase<T> distinct {
        public Query<T> z$sqlOfQueryBase(final SqlContext context) {
                final Query<T> query = sl.z$sqlOfSelectList(context);
                final Sql fromClauseSql = new FromClauseBuilder().build(context);
                final Dialect dialect = context.get(Dialect.class);
                final Sql sql = fromClauseSql == null ?
                        dialect.QueryBase_is_SELECT_DISTINCT_SelectList(query) :
                        dialect.QueryBase_is_SELECT_DISTINCT_SelectList_FromClause(query, fromClauseSql);
                return new ComplexQuery<T>(query, sql);
        }
    }
|
    SELECT DISTINCT sl:SelectList<T> fc:FromClause
;



