#### QueryExpressionBody ###

# There are 2 flavors of QueryExpressionBody: multicolumn and scalar, the latter is QueryExpressionBodyScalar
# Scalar supports the whole hierarchy of QueryTerm, QueryPrimary, QuerySpecification
# Multicolumn QueryExpressionBody is derived only from QuerySpecification


public interface QueryExpressionBody<T> : Query<T> {}

# see QueryBase.sdl, Where.sdl

<T> QueryExpressionBody<T> ::=
    qs:QuerySpecification<T> :: implicit {}
|
    qebs:QueryExpressionBodyScalar<T> :: implicit {}
;

public interface QueryExpressionBodyScalar<T> extends Scalar<T> : Query<T> {}
public class AbstractQueryExpressionBodyScalar<T> implements QueryExpressionBodyScalar<T> {}

<T> QueryExpressionBodyScalar<T> ::=
    qt:QueryTerm<T> :: implicit {}
|
    /**
     * Creates a AbstractQueryExpressionBodyScalar
     * representing {@code (QueryExpressionBodyScalar)this UNION ALL other}.
     * @param other second argument of UNION ALL
     * @return new AbstractQueryExpressionBodyScalar
     */
    qe:QueryExpressionBodyScalar<T> UNION ALL other:QueryTerm<T> ::
        AbstractQueryExpressionBodyScalar<T> unionAll {
            public Query<T> z$sqlOfQueryExpressionBodyScalar(final SqlContext context) {
                return new UnionExceptBuilder<T>(qe, other){
                    @Override
                    protected Sql composeSql(final Dialect dialect, final Sql left, final Sql right) {
                        return dialect.QueryExpressionBodyScalar_is_QueryExpressionBodyScalar_UNION_ALL_QueryTerm(left, right);
                    }
                }.build(context);
            }
        }
|
    /**
     * Creates a AbstractQueryExpressionBodyScalar
     * representing {@code (QueryExpressionBodyScalar)this UNION DISTINCT other}.
     * @param other second argument of UNION DISTINCT
     * @return new AbstractQueryExpressionBodyScalar
     */
    qe:QueryExpressionBodyScalar<T> UNION DISTINCT other:QueryTerm<T> ::
        AbstractQueryExpressionBodyScalar<T> unionDistinct {
            public Query<T> z$sqlOfQueryExpressionBodyScalar(final SqlContext context) {
                return new UnionExceptBuilder<T>(qe, other){
                    @Override
                    protected Sql composeSql(final Dialect dialect, final Sql left, final Sql right) {
                        return dialect.QueryExpressionBodyScalar_is_QueryExpressionBodyScalar_UNION_DISTINCT_QueryTerm(left, right);
                    }
                }.build(context);
            }
        }
|
    /**
     * Creates a AbstractQueryExpressionBodyScalar representing
     * {@code (QueryExpressionBodyScalar)this UNION other}.
     * @param other second argument of UNION
     * @return new AbstractQueryExpressionBodyScalar
     */
    qe:QueryExpressionBodyScalar<T> UNION other:QueryTerm<T> ::
        AbstractQueryExpressionBodyScalar<T> union {
            public Query<T> z$sqlOfQueryExpressionBodyScalar(final SqlContext context) {
                return new UnionExceptBuilder<T>(qe, other){
                    @Override
                    protected Sql composeSql(final Dialect dialect, final Sql left, final Sql right) {
                        return dialect.QueryExpressionBodyScalar_is_QueryExpressionBodyScalar_UNION_QueryTerm(left, right);
                    }
                }.build(context);
            }
        }
|
    /**
     * Creates a AbstractQueryExpressionBodyScalar representing
     * {@code (QueryExpressionBodyScalar)this EXCEPT ALL other}.
     * @param other second argument of EXCEPT ALL
     * @return new AbstractQueryExpressionBodyScalar
     */
    qe:QueryExpressionBodyScalar<T> EXCEPT ALL other:QueryTerm<T> ::
        AbstractQueryExpressionBodyScalar<T> exceptAll {
            public Query<T> z$sqlOfQueryExpressionBodyScalar(final SqlContext context) {
                return new UnionExceptBuilder<T>(qe, other){
                    @Override
                    protected Sql composeSql(final Dialect dialect, final Sql left, final Sql right) {
                        return dialect.QueryExpressionBodyScalar_is_QueryExpressionBodyScalar_EXCEPT_ALL_QueryTerm(left, right);
                    }
                }.build(context);
            }
        }
|
    /**
     * Creates a AbstractQueryExpressionBodyScalar representing
     * {@code (QueryExpressionBodyScalar)this EXCEPT DISTINCT other}.
     * @param other second argument of EXCEPT DISTINCT
     * @return new AbstractQueryExpressionBodyScalar
     */
    qe:QueryExpressionBodyScalar<T> EXCEPT DISTINCT other:QueryTerm<T> ::
        AbstractQueryExpressionBodyScalar<T> exceptDistinct {
            public Query<T> z$sqlOfQueryExpressionBodyScalar(final SqlContext context) {
                return new UnionExceptBuilder<T>(qe, other){
                    @Override
                    protected Sql composeSql(final Dialect dialect, final Sql left, final Sql right) {
                        return dialect.QueryExpressionBodyScalar_is_QueryExpressionBodyScalar_EXCEPT_DISTINCT_QueryTerm(left, right);
                    }
                }.build(context);
            }
        }
|
    /**
     * Creates a AbstractQueryExpressionBodyScalar representing
     * {@code (QueryExpressionBodyScalar) this EXCEPT other}.
     * @param other second argument of EXCEPT
     * @return new AbstractQueryExpressionBodyScalar
     */
    qe:QueryExpressionBodyScalar<T> EXCEPT other:QueryTerm<T> ::
        AbstractQueryExpressionBodyScalar<T> except {
            public Query<T> z$sqlOfQueryExpressionBodyScalar(final SqlContext context) {
                return new UnionExceptBuilder<T>(qe, other){
                    @Override
                    protected Sql composeSql(final Dialect dialect, final Sql left, final Sql right) {
                        return dialect.QueryExpressionBodyScalar_is_QueryExpressionBodyScalar_EXCEPT_QueryTerm(left, right);
                    }
                }.build(context);
            }
        }
;

# QueryTerm is always scalar; we do not add suffix Scalar
#
public interface QueryTerm<T> extends Scalar<T> :  Query<T> {}

public class AbstractQueryTerm<T> implements QueryTerm<T> {}

<T> QueryTerm<T> ::=
    qp:QueryPrimary<T> :: implicit
|
    /**
     * Creates a AbstractQueryTerm representing {@code (QueryTerm)this INTERSECT ALL other}.
     * @param other second argument of INTERSECT ALL
     * @return new AbstractQueryExpressionBodyScalar
     */
    qt:QueryTerm<T> INTERSECT ALL other:QueryPrimary<T> ::
        AbstractQueryTerm<T> intersectAll {
            public Query<T> z$sqlOfQueryTerm(final SqlContext context) {
                return new IntersectBuilder<T>(qt, other){
                    @Override
                    protected Sql composeSql(final Dialect dialect, final Sql left, final Sql right) {
                        return dialect.QueryTerm_is_QueryTerm_INTERSECT_ALL_QueryPrimary(left, right);
                    }
                }.build(context);
            }
        }
|
    /**
     * Creates a AbstractQueryTerm representing {@code (QueryTerm)this INTERSECT DISTINCT other}.
     * @param other second argument of INTERSECT DISTINCT
     * @return new AbstractQueryExpressionBodyScalar
     */
    qt:QueryTerm<T> INTERSECT DISTINCT other:QueryPrimary<T> ::
          AbstractQueryTerm<T> intersectDistinct {
            public Query<T> z$sqlOfQueryTerm(final SqlContext context) {
                return new IntersectBuilder<T>(qt, other){
                    @Override
                    protected Sql composeSql(final Dialect dialect, final Sql left, final Sql right) {
                        return dialect.QueryTerm_is_QueryTerm_INTERSECT_DISTINCT_QueryPrimary(left, right);
                    }
                }.build(context);
            }
          }
|
    /**
     * Creates a AbstractQueryTerm representing {@code (QueryTerm)this INTERSECT other}.
     * @param other second argument of INTERSECT
     * @return new AbstractQueryExpressionBodyScalar
     */
    qt:QueryTerm<T> INTERSECT other:QueryPrimary<T> ::
          AbstractQueryTerm<T> intersect {
            public Query<T> z$sqlOfQueryTerm(final SqlContext context) {
                return new IntersectBuilder<T>(qt, other){
                    @Override
                    protected Sql composeSql(final Dialect dialect, final Sql left, final Sql right) {
                        return dialect.QueryTerm_is_QueryTerm_INTERSECT_QueryPrimary(left, right);
                    }
                }.build(context);
            }
          }
;

public interface QueryPrimary<T> extends Scalar<T>  : Query<T> {}

<T> QueryPrimary<T> ::=
    qs:QuerySpecificationScalar<T> :: implicit
|
    LEFT_PAREN qe:QueryExpressionBodyScalar<T> RIGHT_PAREN :: implicit
;









