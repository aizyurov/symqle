#############################################################################
#
#   Copyright 2010-2013 Alexander Izyurov
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.package org.symqle.common;
#
##############################################################################

import org.symqle.common.QueryBuilder;
import org.symqle.common.SqlContext;
import org.symqle.querybuilder.ScalarNameGenerator;
import org.symqle.querybuilder.ColumnNameGenerator;

/**
 * @author lvovich
 */
abstract class SetOperationBuilder<T> {
    abstract QueryBuilder<T> build(SqlContext context);

    protected final SqlContext createInnerContext(final SqlContext context) {
        final ColumnNameGenerator nameProvider = context.get(ColumnNameGenerator.class);
        final ColumnNameGenerator innerNameProvider = nameProvider == null ? null : new ScalarNameGenerator();
        return context.newBuilder()
                        .put(TableRegistry.class, new ChildSelectTableRegistry(context.get(TableRegistry.class)))
                        .put(ColumnNameGenerator.class, innerNameProvider)
                        .toSqlContext();
    }
}

import org.symqle.common.QueryBuilder;
import org.symqle.common.SqlBuilder;
import org.symqle.common.SqlContext;
import org.symqle.common.ComplexQueryBuilder;


/**
 * @author lvovich
 */
abstract class UnionExceptBuilder<T> extends SetOperationBuilder<T> {

    private final QueryExpressionBodyScalar<T> qe;
    private final QueryTerm<T> qt;

    protected UnionExceptBuilder(final QueryExpressionBodyScalar<T> qe, final QueryTerm<T> qt) {
        this.qe = qe;
        this.qt = qt;
    }

    @Override
    public QueryBuilder<T> build(final SqlContext context) {
        ((SelectTableRegistry) context.get(TableRegistry.class)).lock();
        // left and right parts have separate contexts
        final SqlContext leftContext = createInnerContext(context);
        final SqlContext rightContext = createInnerContext(context);
        // learning
        qe.z$sqlOfQueryExpressionBodyScalar(Symqle.makeLearningContext(leftContext));
        qt.z$sqlOfQueryTerm(Symqle.makeLearningContext(rightContext));
        // construction
        final QueryBuilder<T> left = qe.z$sqlOfQueryExpressionBodyScalar(leftContext);
        final SqlBuilder right = qt.z$sqlOfQueryTerm(rightContext);
        return new ComplexQueryBuilder<T>(left, composeSql(context.get(Dialect.class), left, right));
    }

    protected abstract SqlBuilder composeSql(Dialect dialect, SqlBuilder left, SqlBuilder right);
}

import org.symqle.common.QueryBuilder;
import org.symqle.common.SqlBuilder;
import org.symqle.common.SqlContext;
import org.symqle.common.ComplexQueryBuilder;

/**
 * @author lvovich
 */
abstract class IntersectBuilder<T> extends SetOperationBuilder<T>  {

    private final QueryTerm<T> qt;
    private final QueryPrimary<T> qp;

    protected IntersectBuilder(final QueryTerm<T> qt, final QueryPrimary<T> qp) {
        this.qp = qp;
        this.qt = qt;
    }

    public QueryBuilder<T> build(final SqlContext context) {
        ((SelectTableRegistry) context.get(TableRegistry.class)).lock();
        // left and right parts have separate contexts
        final SqlContext leftContext = createInnerContext(context);
        final SqlContext rightContext = createInnerContext(context);
        // learning
        qt.z$sqlOfQueryTerm(Symqle.makeLearningContext(leftContext));
        qp.z$sqlOfQueryPrimary(Symqle.makeLearningContext(rightContext));
        // construction
        final QueryBuilder<T> left = qt.z$sqlOfQueryTerm(leftContext);
        final SqlBuilder right = qp.z$sqlOfQueryPrimary(rightContext);
        return new ComplexQueryBuilder<T>(left, composeSql(context.get(Dialect.class), left, right));
    }

    protected abstract SqlBuilder composeSql(Dialect dialect, SqlBuilder left, SqlBuilder right);

}

