# OrderByClause ::= ORDER BY SortSpecificationList
# SortSpecificationList ::= SortSpecification [ { comma zSortSpecification }... ]
# SortSpecification ::= SortKey [ ordering_specification ] [ null_ordering ]
# SortKey ::= ValueExpression
# ordering_specification ::= ASC | DESC
# null_ordering ::= NULLS FIRST | NULLS LAST
# 
# rephrased in trivial manner - see below
# 

public interface OrderByClause : Sql {}

OrderByClause ::= ORDER BY ssl:SortSpecificationList :: protected OrderByClause createOrderByClause {}
;

public interface SortSpecificationList : Sql {}

#
SortSpecificationList ::=
    ss:SortSpecification :: protected SortSpecificationList createSortSpecificationList {}
|
    ssl:SortSpecificationList COMMA ss:SortSpecification :: protected SortSpecificationList appendSortSpecification {}
;

public interface SortSpecification : Sql {}

public class AbstractSortSpecification implements SortSpecification {}

SortSpecification ::=
    sos:SortOrderingSpecification :: implicit {}
|
    sos:SortOrderingSpecification NULLS FIRST :: public AbstractSortSpecification nullsFirst {}
|
    sos:SortOrderingSpecification NULLS LAST :: public AbstractSortSpecification nullsLast {}
;

public interface SortOrderingSpecification : Sql {}

public class AbstractSortOrderingSpecification implements SortOrderingSpecification {}

public interface SortKey : Sql {}

SortKey ::= ve:ValueExpression<?> :: implicit {}
;

SortOrderingSpecification ::=
    key:SortKey :: implicit {}
|
    key:SortKey ASC
     :: public AbstractSortOrderingSpecification asc {
            /**
            * Creates an Sql representing SortOrderingSpecification
            * @param context the Sql construction context
            * @return constructed Sql
            */
            public Sql z$sqlOfSortOrderingSpecification(final SqlContext context) {
                 return context.get(Dialect.class).SortOrderingSpecification_is_SortKey_ASC(key.z$sqlOfSortKey(context));
            }
     }
|  key:SortKey DESC
     :: public AbstractSortOrderingSpecification desc {
            /**
            * Creates an Sql representing SortOrderingSpecification
            * @param context the Sql construction context
            * @return constructed Sql
            */
            public Sql z$sqlOfSortOrderingSpecification(final SqlContext context) {
                 // need a separate inner context for sort key because ScalarInnerContext column name may be accessed only once
                 return context.get(Dialect.class).SortOrderingSpecification_is_SortKey_DESC(key.z$sqlOfSortKey(context));
            }
     }
;
