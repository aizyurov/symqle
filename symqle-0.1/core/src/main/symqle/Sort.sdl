# OrderByClause ::= ORDER BY SortSpecificationList
# SortSpecificationList ::= SortSpecification [ { comma zSortSpecification }... ]
# SortSpecification ::= SortKey [ ordering_specification ] [ null_ordering ]
# SortKey ::= ValueExpression
# ordering_specification ::= ASC | DESC
# null_ordering ::= NULLS FIRST | NULLS LAST
# 
# rephrased in trivial manner - see below
# 

public interface OrderByClause : Sql {}

OrderByClause ::= ORDER BY ssl:SortSpecificationList :: private OrderByClause createOrderByClause
;

public interface SortSpecificationList : Sql {}

#
SortSpecificationList ::=
    ss:SortSpecification :: private SortSpecificationList createSortSpecificationList
|
    ssl:SortSpecificationList COMMA ss:SortSpecification :: private SortSpecificationList appendSortSpecification
;

public interface SortSpecification : Sql {}

public class AbstractSortSpecification implements SortSpecification {}

SortSpecification ::=
    sos:SortOrderingSpecification :: implicit
|
    /**
     * Applies {@code NULLS FIRST} to {@code this}.
     * @return resulting sort specification
     */
    sos:SortOrderingSpecification NULLS FIRST :: AbstractSortSpecification nullsFirst {}
|
    /**
     * Applies {@code NULLS LAST} to {@code this}.
     * @return resulting sort specification
     */
    sos:SortOrderingSpecification NULLS LAST :: AbstractSortSpecification nullsLast {}
;

public interface SortOrderingSpecification : Sql {}

public class AbstractSortOrderingSpecification implements SortOrderingSpecification {}

public interface SortKey : Sql {}

SortKey ::= ve:ValueExpression<?> :: implicit
;

SortOrderingSpecification ::=
    key:SortKey :: implicit
|
    /**
     * Applies {@code ASC} to {@code this}.
     * @return resulting sort ordering specification with ascending order
     */
    key:SortKey ASC :: AbstractSortOrderingSpecification asc {
        public Sql z$sqlOfSortOrderingSpecification(final SqlContext context) {
             return context.get(Dialect.class).SortOrderingSpecification_is_SortKey_ASC(key.z$sqlOfSortKey(context));
        }
    }
|
    /**
     * Applies {@code ASC} to {@code this}.
     * @return resulting sort ordering specification with descending order
     */
    key:SortKey DESC :: AbstractSortOrderingSpecification desc {
        /**
        * Creates an Sql representing SortOrderingSpecification
        * @param context the Sql construction context
        * @return constructed Sql
        */
        public Sql z$sqlOfSortOrderingSpecification(final SqlContext context) {
             return context.get(Dialect.class).SortOrderingSpecification_is_SortKey_DESC(key.z$sqlOfSortKey(context));
        }
     }
;
