#############################################################################
#
#   Copyright 2010-2013 Alexander Izyurov
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.package org.symqle.common;
#
##############################################################################

public interface ScalarSubquery<T> extends Scalar<T> : SqlBuilder {}

<T> ScalarSubquery<T> ::=
  LEFT_PAREN qe:QueryExpressionBodyScalar<T> RIGHT_PAREN :: implicit {
       public SqlBuilder z$sqlOfScalarSubquery(final SqlContext context) {
       final TableRegistry innerRegistry = new ChildSelectTableRegistry(context.get(TableRegistry.class));
       final SqlContext innerContext = context.newBuilder().
                put(ColumnNameGenerator.class, null).
                put(TableRegistry.class, innerRegistry).toSqlContext();

         // learning
       qe.z$sqlOfQueryExpressionBodyScalar(makeLearningContext(innerContext));
       // real SqlBuilder generation
           final SqlBuilder base = qe.z$sqlOfQueryExpressionBodyScalar(innerContext);
           return context.get(Dialect.class).ScalarSubquery_is_LEFT_PAREN_QueryExpressionBodyScalar_RIGHT_PAREN(base);
      }
    }
|
  LEFT_PAREN qe:AggregateQuerySpecification<T> RIGHT_PAREN :: implicit {
       public SqlBuilder z$sqlOfScalarSubquery(final SqlContext context) {
       final TableRegistry innerRegistry = new ChildSelectTableRegistry(context.get(TableRegistry.class));
       final SqlContext innerContext = context.newBuilder().
                put(ColumnNameGenerator.class, null).
                put(TableRegistry.class, innerRegistry).toSqlContext();

         // learning
       qe.z$sqlOfAggregateQuerySpecification(makeLearningContext(innerContext));
       // real SqlBuilder generation
           final SqlBuilder base = qe.z$sqlOfAggregateQuerySpecification(innerContext);
           return context.get(Dialect.class).ScalarSubquery_is_LEFT_PAREN_AggregateQuerySpecification_RIGHT_PAREN(base);
      }
    }
;


# todo Row subqueries support