public interface ScalarSubquery<T> extends Scalar<T> : SqlBuilder {}

<T> ScalarSubquery<T> ::=
  LEFT_PAREN qe:QueryExpressionBodyScalar<T> RIGHT_PAREN :: implicit {
       public SqlBuilder z$sqlOfScalarSubquery(final SqlContext context) {
       final TableRegistry innerRegistry = new ChildSelectTableRegistry(context.get(TableRegistry.class));
       final SqlContext innerContext = context.newBuilder().
                put(ColumnNameGenerator.class, null).
                put(TableRegistry.class, innerRegistry).toSqlContext();

         // learning
       qe.z$sqlOfQueryExpressionBodyScalar(makeLearningContext(innerContext));
       // real SqlBuilder generation
           final SqlBuilder base = qe.z$sqlOfQueryExpressionBodyScalar(innerContext);
           return context.get(Dialect.class).ScalarSubquery_is_LEFT_PAREN_QueryExpressionBodyScalar_RIGHT_PAREN(base);
      }
    }
|
  LEFT_PAREN qe:AggregateQuerySpecification<T> RIGHT_PAREN :: implicit {
       public SqlBuilder z$sqlOfScalarSubquery(final SqlContext context) {
       final TableRegistry innerRegistry = new ChildSelectTableRegistry(context.get(TableRegistry.class));
       final SqlContext innerContext = context.newBuilder().
                put(ColumnNameGenerator.class, null).
                put(TableRegistry.class, innerRegistry).toSqlContext();

         // learning
       qe.z$sqlOfAggregateQuerySpecification(makeLearningContext(innerContext));
       // real SqlBuilder generation
           final SqlBuilder base = qe.z$sqlOfAggregateQuerySpecification(innerContext);
           return context.get(Dialect.class).ScalarSubquery_is_LEFT_PAREN_AggregateQuerySpecification_RIGHT_PAREN(base);
      }
    }
;


# todo Row subqueries support