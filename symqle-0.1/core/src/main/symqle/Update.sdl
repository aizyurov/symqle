# <update statement: searched> ::= UPDATE <target table> SET <set clause list> [ WHERE <search condition> ]
# <set clause list> ::= <set clause> [ { <comma> <set clause> }... ]
# <set clause> ::=
#		<multiple column assignment>
#	|	<set target> <equals operator> <update source>
#
# <set target> ::= <update target> | <mutated set clause>
#
# <multiple column assignment> ::= <set target list> <equals operator> <assigned row>
#
# <set target list> ::= <left paren> <set target> [ { <comma> <set target> }... ] <right paren>
#
# <assigned row> ::= <contextually typed row value expression>
#
# <update target> ::=
#		<object column>
#	|	<object column> <left bracket or trigraph> <simple value specification> <right bracket or trigraph>
#
# <object column> ::= <column name>
#
# <mutated set clause> ::= <mutated target> <period> <method name>
# <update source> ::= <value expression> | <contextually typed value specification>
# <contextually typed value specification> ::=
#  		<implicitly typed value specification> | <default specification>
#
#  <implicitly typed value specification> ::= <null specification> | <empty specification>
#
#  <null specification> ::= NULL
#  <default specification> ::= DEFAULT

import java.sql.SQLException;
import org.symqle.jdbc.Option;
import org.symqle.jdbc.Engine;
public interface DataChangeStatement : Sql {}

:: private static Sql prepareUpdate(final DataChangeStatement statement, final Builder contextBuilder, final ColumnName<?> keyColumn, final List<Option> options) {
        final UpdatableConfiguration configuration = new UpdatableConfiguration();
        for (final Option option : options) {
           option.apply(configuration);
        }
        final SqlContext context = contextBuilder
                .put(Configuration.class, configuration)
                .put(TableRegistry.class, new DataChangeTableRegistry())
                .toSqlContext();
        final Sql rawSql = statement.z$sqlOfDataChangeStatement(context);
        if (keyColumn != null) {
            keyColumn.z$sqlOfColumnName(context);
        }
        return new Sql() {
            @Override
            public void append(final StringBuilder builder) {
                builder.append(context.get(Dialect.class).formatSql(rawSql.toString()));
            }
            @Override
            public void setParameters(final SqlParameters p) throws SQLException {
                rawSql.setParameters(p);
            }
        };
    }



import org.symqle.jdbc.Option;
:: public String show(final DataChangeStatement statement, final Dialect dialect, final Option... options) {
     final SqlContext.Builder contextBuilder = new SqlContext.Builder().put(Dialect.class, dialect);
     final StringBuilder sqlBuilder = new StringBuilder();
     prepareUpdate(statement, contextBuilder, null, Arrays.asList(options)).append(sqlBuilder);
    return sqlBuilder.toString();
}

import org.symqle.jdbc.Option;
import org.symqle.jdbc.Engine;
import java.sql.SQLException;
:: public int execute(final DataChangeStatement statement, final Engine engine, final Option... options) throws SQLException {
     final SqlContext.Builder contextBuilder = new SqlContext.Builder().put(Dialect.class, engine.getDialect());
     List<Option> allOptions = new ArrayList<Option>(engine.getOptions());
     allOptions.addAll(Arrays.asList(options));
     final Sql sql = prepareUpdate(statement, contextBuilder, null, allOptions);
     return engine.execute(sql, options);
}

:: public int[] submit(final DataChangeStatement statement, final Engine engine, final Option... options) throws SQLException {
     final Dialect dialect = engine.getDialect();
     final SqlContext.Builder contextBuilder = new SqlContext.Builder().put(Dialect.class, dialect);
     List<Option> allOptions = new ArrayList<Option>(engine.getOptions());
     allOptions.addAll(Arrays.asList(options));
     final Sql sql = prepareUpdate(statement, contextBuilder, null, allOptions);
     return engine.submit(sql, options);
}

DataChangeStatement ::=
    s:UpdateStatement :: implicit {}
|
    s:InsertStatement :: implicit {}
|
    s:DeleteStatement :: implicit {}
;

public interface UpdateStatement : Sql {}

public class AbstractUpdateStatement implements UpdateStatement {}

UpdateStatement ::=
    b:UpdateStatementBase :: implicit {}
|
    b:UpdateStatementBase wc:WhereClause ::
        public AbstractUpdateStatement where {}
;

public interface UpdateStatementBase : Sql {}

public class AbstractUpdateStatementBase implements UpdateStatementBase {}

UpdateStatementBase ::=
    UPDATE t:TargetTable SET l:SetClauseList :: protected AbstractUpdateStatementBase createUpdate {}
;

public interface TargetTable : Sql {
    public String getName();
}

public interface SetClauseList : Sql {}

SetClauseList ::=
    c:SetClause :: protected SetClauseList initSetList {}
|
    l:SetClauseList COMMA c:SetClause :: protected SetClauseList appendSetList {}
;

:: public AbstractUpdateStatementBase update(final TargetTable t, final SetClause first, final SetClause... other) {
    SetClauseList l = initSetList(first);
    for (SetClause c: other) {
        l = appendSetList(l, c);
    }
    return createUpdate(t, l);
}

public interface SetClause extends InsertColumn, ContextuallyTypedRowValueElement : Sql {}

:: public <T> SetClause set(final ColumnName<T> column, final T value) {
    return set(column, DynamicParameter.create(column.getMapper(), value));
}

<T> SetClause ::=
    c:ColumnName<T> EQ e:ValueExpression<T> :: public SetClause set {
            public Sql z$sqlOfContextuallyTypedRowValueElement(final SqlContext context) {
                return e.z$sqlOfValueExpression(context);
            }

            public Sql z$sqlOfInsertColumn(final SqlContext context) {
                return c.z$sqlOfColumnName(context);
            }
    }
;

SetClause ::=
    c:ColumnName<?> EQ NULL :: public SetClause setNull {
            public Sql z$sqlOfContextuallyTypedRowValueElement(final SqlContext context) {
                return SqlTerm.NULL.toSql();
            }
            public Sql z$sqlOfInsertColumn(final SqlContext context) {
                return c.z$sqlOfColumnName(context);
            }
    }
|
    c:ColumnName<?> EQ DEFAULT :: public SetClause setDefault {
            public Sql z$sqlOfContextuallyTypedRowValueElement(final SqlContext context) {
                return SqlTerm.DEFAULT.toSql();
            }
            public Sql z$sqlOfInsertColumn(final SqlContext context) {
                return c.z$sqlOfColumnName(context);
            }
    }
;


public interface ColumnName<T> extends Scalar<T> : Sql {}


import java.util.Collections;
public class Table extends TableOrView implements TargetTable {
    public Table(String name) {
        super(name);
    }

    public Sql z$sqlOfTargetTable(final SqlContext context) {
        context.get(TableRegistry.class).addAll(Collections.<TableOrView>singleton(this));
        return new CustomSql(getName());
    }
}


import java.sql.SQLException;
import org.symqle.jdbc.Option;
import org.symqle.jdbc.Engine;
public interface InsertStatement : Sql {}
public class AbstractInsertStatement implements InsertStatement {}

# TODO <override clause> not implemented

InsertStatement ::=
#    INSERT INTO t:TargetTable s:FromSubquery
#        :: protected AbstractInsertStatement fromSubquery {}
#|
    INSERT INTO t:TargetTable s:FromConstructor
        :: protected AbstractInsertStatement fromConstructor {}
|
    INSERT INTO t:TargetTable DEFAULT VALUES
        :: public AbstractInsertStatement insertDefault {}
;

# interface FromSubquery : Sql {}

interface FromConstructor : Sql {}

# FromSubquery ::= LEFT_PAREN l:InsertColumnList RIGHT_PAREN e:QueryExpression
#         :: protected FromSubquery createFromSubquery {}
# ;

FromConstructor ::= LEFT_PAREN l:InsertColumnList RIGHT_PAREN t:TableValueConstructor
         :: protected FromConstructor createFromConstructor {
            /**
            * Creates an Sql representing FromConstructor.
            * @param context the Sql construction context
            * @return constructed Sql
            */
            public Sql z$sqlOfFromConstructor(final SqlContext context) {
                final SqlContext innerContext = context.newBuilder().put(TableRegistry.class,
                        new NoTablesRegistry(context.get(TableRegistry.class))).toSqlContext();
                return context.get(Dialect.class)
                  .FromConstructor_is_LEFT_PAREN_InsertColumnList_RIGHT_PAREN_TableValueConstructor(
                        l.z$sqlOfInsertColumnList(context), t.z$sqlOfTableValueConstructor(innerContext));
            }
         }
;

interface InsertColumnList : Sql {}
InsertColumnList ::=
    c:InsertColumn :: protected InsertColumnList initColumnList {}
|
    l:InsertColumnList COMMA c:InsertColumn :: protected InsertColumnList appendColumnList {}
;

public interface InsertColumn : Sql {}

interface TableValueConstructor : Sql {}

# only one row is supported so far. The syntax is not that of SQL-2011, but is supported by all major databases
# (standard define
TableValueConstructor ::= VALUES LEFT_PAREN l:ContextuallyTypedRowValueList RIGHT_PAREN :: protected TableValueConstructor createTableValueConstructor {}
;

interface ContextuallyTypedRowValueList : Sql {}

ContextuallyTypedRowValueList ::=
    e:ContextuallyTypedRowValueElement
        :: protected ContextuallyTypedRowValueList initRowValueList {}
|
    l:ContextuallyTypedRowValueList COMMA d:ContextuallyTypedRowValueElement
        :: protected ContextuallyTypedRowValueList appendRowValueList {}
;

public interface ContextuallyTypedRowValueElement : Sql {}

:: public AbstractInsertStatement insert(TargetTable targetTable, SetClause first, SetClause... other) {
    InsertColumnList columnList = initColumnList(first);
    ContextuallyTypedRowValueList valueList = initRowValueList(first);
    for (SetClause next: other) {
        columnList = appendColumnList(columnList, next);
        valueList = appendRowValueList(valueList, next);
    }
    return fromConstructor(targetTable,
        createFromConstructor(columnList, createTableValueConstructor(valueList)));
}


public interface DeleteStatement : Sql {}

public class AbstractDeleteStatement implements DeleteStatement {}

DeleteStatement ::= b:DeleteStatementBase :: implicit {}
|
    b:DeleteStatementBase wc:WhereClause :: public AbstractDeleteStatement where {}
;

public interface DeleteStatementBase : Sql {}

public class AbstractDeleteStatementBase implements DeleteStatementBase {}

DeleteStatementBase ::= DELETE FROM t:TargetTable :: public AbstractDeleteStatementBase delete {}
;

:: public static <T> T executeReturnKey(final InsertStatement statement, final ColumnName<T> keyColumn, final Engine engine, final Option... options) throws SQLException {
     final SqlContext.Builder contextBuilder = new SqlContext.Builder().put(Dialect.class, engine.getDialect());
     List<Option> allOptions = new ArrayList<Option>(engine.getOptions());
     allOptions.addAll(Arrays.asList(options));
       final DataChangeStatement dataChange = new AbstractInsertStatement() {
           @Override
           public Sql z$sqlOfInsertStatement(final SqlContext context) {
               return statement.z$sqlOfInsertStatement(context);
           }
       };
       final Sql sql = prepareUpdate(dataChange, contextBuilder, keyColumn, allOptions);
       return engine.executeReturnKey(sql, keyColumn, options);
      }




